<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[松鼠窝]]></title>
  <link href="http://pangyi.github.io/atom.xml" rel="self"/>
  <link href="http://pangyi.github.io/"/>
  <updated>2015-01-18T17:28:50+08:00</updated>
  <id>http://pangyi.github.io/</id>
  <author>
    <name><![CDATA[PangYi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置nginx支持PHP]]></title>
    <link href="http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/"/>
    <updated>2015-01-18T16:06:07+08:00</updated>
    <id>http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php</id>
    <content type="html"><![CDATA[<p>nginx本身不支持php。如果需要使用php，需要安装php解析服务，如php-fpm，或spawn-fcgi等。从在Ubuntu上配置的便捷性考虑，这次使用php-fpm实现。</p>

<!-- more -->

<h2 id="phpphp-fpm">安装php和php-fpm</h2>

<p>安装方法，略……</p>

<p>因为可以直接用包管理器安装。</p>

<p>安装后需要启动服务。</p>

<h2 id="nginx">修改nginx配置文件</h2>

<p>修改配置文件/etc/nginx/sites-available/default，首先让让默认页面里有php文件：</p>

<pre><code>index index.php index.html index.htm;
</code></pre>

<p>接着开启php支持，找到“location ~ .php”部分，将其中的注释进行修改：</p>

<pre><code>location ~ \.php$ {
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

	# With php5-cgi alone:
#	fastcgi_pass 127.0.0.1:9000;
	# With php5-fpm:
	fastcgi_pass unix:/var/run/php5-fpm.sock;
	fastcgi_index index.php;
	include fastcgi_params;
}
</code></pre>

<p>“fastcgi_pass 127.0.0.1:9000;”与spawn-fcgi有关，故要注释。修改配置文件后需要重启nginx服务。</p>

<h2 id="section">原理</h2>

<p>按网上的说法：“nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被nginx”。也就是说，nginx将处理请求交给php5-fpm，再接收处理返回结果。</p>

<h2 id="section-1">参考</h2>

<p>http://www.nginx.cn/231.html</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/">http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM窗口操作]]></title>
    <link href="http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/"/>
    <updated>2015-01-18T13:06:07+08:00</updated>
    <id>http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo</id>
    <content type="html"><![CDATA[<h2 id="section">开窗</h2>

<h3 id="section-1">横向切割（水平排列）窗口</h3>

<p>:new+窗口名(保存后就是文件名)	窗口名可选</p>

<p>:split+窗口名，也可以简写为:sp+窗口名	当前文件分别显示到了两个窗口，内容完全相同，并保持同步。</p>

<h3 id="section-2">纵向切割（垂直排列）窗口</h3>

<p>:vsplit+窗口名，也可以简写为：vsp+窗口名</p>

<h2 id="section-3">切窗</h2>

<p>Ctrl-w w	向后切换窗口，窗口操作都使用Ctrl-w开头。</p>

<p>Ctrl-w p	切换回上一个窗口，注意不是与w对应的操作。</p>

<p>Ctrl-w h	切换到左边窗口，如果有的话，下同</p>

<p>Ctrl-w l	切换到右边窗口</p>

<p>Ctrl-w j	切换到下面窗口</p>

<p>ctrl-w k	切换到上面窗口，这4个操作与光标操作的键位对应。</p>

<h2 id="section-4">其它</h2>

<p>Ctrl-w +	扩大窗口，如果还可以的话，因为是平均扩大，不会同时缩小其它窗口</p>

<p>Ctrl-w -	缩小窗口，窗口大小减一行。</p>

<p>Ctrl-w行数+	扩大窗口指定的行数。注意与Ctrl-w +不同，此命令只扩大当前窗口。</p>

<p>Ctrl-w行数-	缩小窗口指定的行数。</p>

<h2 id="section-5">参考文章</h2>

<p>http://blog.csdn.net/jeffry_cheng/article/details/6167378</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/">http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步octopress文章到支持MetaWeblog的博客]]></title>
    <link href="http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/"/>
    <updated>2015-01-03T14:41:25+08:00</updated>
    <id>http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke</id>
    <content type="html"><![CDATA[<p>同步octopress文章到支持MetaWeblog的博客需要用到<a href="https://github.com/huangbowen521/octopress-syncPost">一个插件</a>。可能由于版本的问题，安装和配置需要做一些调整，否则如果按插件的说明来安装配置虽然能实现功能，但总有些不太合适的地方。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">获得插件</a></li>
  <li><a href="#section-1">修改插件</a></li>
  <li><a href="#section-2">配置配置文件</a></li>
  <li><a href="#section-3">安装相关的组件</a></li>
  <li><a href="#section-4">同步博文</a></li>
  <li><a href="#section-5">其它参考：</a></li>
</ul>

<h2 id="section">获得插件</h2>

<p>从github上获得插件中plugins中的5个ruby文件，分别实现同步全部博客，同步最后一篇博客，同步指定时间之后的博客，同步指定标题的博客等（有一个公共调用文件）。对这些文件要单独建一个目录存放，比如在octopress的根目录下建一个syncmeta目录。然后将插件放入此目录。</p>

<p>这样做是因为目前版本的octopress中的rake generate操作（实际执行的是jekyll build）时，会把plugins中的所有ruby文件执行一遍，这样做一次rake generate操作，就会做一次同步全部博客，同步最后一篇博客……</p>

<h2 id="section-1">修改插件</h2>

<p>在所有插件中找到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;./plugins/sync_post.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;./syncmeta/sync_post.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">配置配置文件</h2>

<p>Rakefile的配置完全按github上的说明，_config.yml中的MetaWeblog_url一项，需要使用最新的博客离线编辑的插件URL，如cnblog上我的博客的url就是http://rpc.cnblogs.com/metaweblog/maoxiong ，而不是插件说明中的那样。</p>

<h2 id="section-3">安装相关的组件</h2>

<p>在Gemfile中加入：</p>

<pre><code>gem 'metaweblog', '~&gt; 0.1.0'
gem 'nokogiri', '~&gt; 1.5.9'
</code></pre>

<p>然后执行bundle install进行安装。</p>

<p>安装中会报一些与库文件相关的错误，可以安装相关库文件：</p>

<pre><code>sudo apt-get install libxml2-dev libxslt-dev
</code></pre>

<h2 id="section-4">同步博文</h2>

<ul>
  <li>同步最后一篇博文：rake sync_latest_post[“PASSWD”]</li>
</ul>

<p>命令中只能输入一个密码，如果有多个博客要同步，要把它们的密码设置成一样的，下同。</p>

<p>在命令中输入密码时，密码最好不要有通常用于转义用的特殊字符，否则可能有问题。</p>

<p>如果不输入密码，则会在执行过程中要求输入每个博客的密码。此时密码中的特殊字符不影响使用。</p>

<ul>
  <li>
    <p>同步全部博文：sync_all_posts[“PASSWD”]</p>
  </li>
  <li>
    <p>同步某一时间之后的博文：rake sync_posts_after_date[“date”,”PASSWD”]</p>
  </li>
</ul>

<p>date类似于”2013-01-01” 、 “2013/01/01” 、 “Jan 1 2013”。如果更改了Octopress生成Blog的目录结构，会报类似“sync_post.rb: 权限不够”之类的错误。实际原因是插件中查找目录的部分使用的代码是按默认的目录结构设计的。这部分代码在sync_post.rb的第51行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">postDate</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">path</span><span class="o">[</span><span class="sr">/\d{4}\/\d{2}\/\d{2}/</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要对它进行修改以适应定制后的目录结构。</p>

<p>不清楚是不是与改过目录结构有关，按时间同步的速度非常慢。</p>

<ul>
  <li>同步指定标题的博文：rake sync_post_by_title[“title”,”PASSWD”]</li>
</ul>

<p>此处的title是博客标题，不是文件名。中文的标题在Octopress中会被替换成拼音。空格也会被替换成“-”。所以博客标题和文件名并不对应。</p>

<h2 id="section-5">其它参考：</h2>

<p>解决安装gem中的报错，并从中获得了修改日期目录结构的灵感：</p>

<p>http://fzyz999.github.io/blog/2013/05/06/ru-he-shi-yong-octopresscha-jian-tong-bu-bo-wen-dao-oschinashang/</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/">http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPG加密解密与实际应用]]></title>
    <link href="http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/"/>
    <updated>2015-01-03T11:27:13+08:00</updated>
    <id>http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong</id>
    <content type="html"><![CDATA[<p>主要内容：GPG加密解密的基本操作与少量应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">简介</a></li>
  <li><a href="#section-1">安装</a></li>
  <li><a href="#section-2">生成密钥操作过程</a></li>
  <li><a href="#section-3">对密钥的一些操作</a>    <ul>
      <li><a href="#section-4">查看密钥</a></li>
      <li><a href="#section-5">导出密钥</a></li>
      <li><a href="#section-6">导入密钥</a></li>
      <li><a href="#section-7">注销密钥</a></li>
      <li><a href="#section-8">删除密钥</a></li>
      <li><a href="#section-9">编辑密钥</a>        <ul>
          <li><a href="#section-10">签名</a></li>
          <li><a href="#section-11">修改密码</a></li>
          <li><a href="#section-12">等……</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-13">加密文件</a></li>
  <li><a href="#section-14">解密文件</a></li>
  <li><a href="#section-15">一些参考</a></li>
</ul>

<h2 id="section">简介</h2>

<p>GPG——GnuPG，是一种非对称密钥加密工具软件，主要用于加密解密，进行数字签名等。GPG可以生成用于加密解密、进行数字签名、数据指纹的非对称密钥。</p>

<h2 id="section-1">安装</h2>

<p>目前UBUNTU默认已经安装了GPG，编译安装可参考<a href="https://www.gnupg.org/howtos/zh/GPGMiniHowto-2.html#ss2.1">中文版Howto中的安装一节</a>。注意国际版和美国版的区别。</p>

<h2 id="section-2">生成密钥操作过程</h2>

<p>生成密钥的命令是gpg –gen-key，下面是一个gpg –gen-key执行的过程，会夹杂说明文字，并跳过一部分不重要的提示信息，来说明密钥生成的过程：</p>

<pre><code>gpg --gen-key
……
请选择您要使用的密钥种类：
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (仅用于签名)
   (4) RSA (仅用于签名)
您的选择？ 
</code></pre>

<p>可以选择不同的加密算法，以及用途。以前默认使用的是DSA算法，目前变成了RSA。这次选择默认。</p>

<pre><code>RSA 密钥长度应在 1024 位与 4096 位之间。
您想要用多大的密钥尺寸？(2048) 
</code></pre>

<p>密钥长度/尺寸越长，越不易破解，但也需要更多的处理过程，因而可能处理的更慢。此处默认值是2048。此值已经与HOWTO中不太一样了，更长了，DSA密钥的长度范围也变成了1024-3072之间。这是个“泄露年龄的问题”。</p>

<pre><code>请设定这把密钥的有效期限。
	 0 = 密钥永不过期
      &lt;n&gt;  = 密钥在 n 天后过期
      &lt;n&gt;w = 密钥在 n 周后过期
      &lt;n&gt;m = 密钥在 n 月后过期
      &lt;n&gt;y = 密钥在 n 年后过期
……
</code></pre>

<p>密钥有效期，不用解释。</p>

<pre><code>您需要一个用户标识来辨识您的密钥；本软件会用真实姓名、注释和电子邮件地址组合
成用户标识，如下所示：
    “Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;”

真实姓名： xxx
电子邮件地址： xxx@sina.com
</code></pre>

<p>这个标识会作为以后维护密钥的标志，如查询，导入导出，销毁等操作，将以此为UID进行检索确认对只个密钥进行操作。</p>

<pre><code>您需要一个密码来保护您的私钥。
</code></pre>

<p>输入一个密码，这样在使用密钥时，会要求输入密码，正确后才能使用密钥，这是第二重保护。
可以不输入密码，以用于一些特殊用途，不过一般情况下，还是有它比较好，只是必须记好，别忘了。</p>

<pre><code>我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。

随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！
(还需要177字节)
....+++++

随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！
(还需要155字节)
....................+++++
</code></pre>

<p>这时系统开始生成密钥，这期间需要有足够的操作以在内存中生成随机数。所以，去干点别的，直到密钥生成完毕，但不要离开喝茶。</p>

<pre><code>gpg: 密钥 375B9788 被标记为绝对信任
公钥和私钥已经生成并经签名。
……
sub   4096R/107FE36C 2014-12-13
</code></pre>

<p>至此密钥生成完成。</p>

<h2 id="section-3">对密钥的一些操作</h2>

<h3 id="section-4">查看密钥</h3>

<pre><code>$ gpg --list-keys
/home/pangyi/.gnupg/pubring.gpg
-------------------------------
pub   4096R/375B9788 2014-12-13
uid                  xxx (xxxxx) &lt;xxx@sina.com&gt;
sub   4096R/107FE36C 2014-12-13

pub   3072D/9D4F5F01 2014-12-14
uid                  uidfile (xxx) &lt;xxx@sina.com&gt;
sub   3072g/6D72E230 2014-12-14
</code></pre>

<p>可以看到密钥的UID。</p>

<p>查看密钥签名信息使用gpg –list-sigs，查看密钥指纹信息使用gpg –fingerprint</p>

<p>查看私钥信息：</p>

<pre><code>gpg --list-secret-keys
/home/pangyi/.gnupg/secring.gpg
-------------------------------
sec   4096R/375B9788 2014-12-13
uid                  xxx (xxxxx) &lt;xxx@sina.com&gt;
ssb   4096R/107FE36C 2014-12-13

sec   3072D/9D4F5F01 2014-12-14
uid                  uidfile (xxx) &lt;xxx@sina.com&gt;
ssb   3072g/6D72E230 2014-12-14
</code></pre>

<h3 id="section-5">导出密钥</h3>

<p>gpg –export 用于导出密钥公钥。当有多个密钥时，需要指定UID或sec处的标识，输入的UID不必完整，能唯一标识就能输出密钥。但用UID有可能会同时输出多个密钥来，不如使用sec好。</p>

<p>密钥会输出到标准输出，可以重定向到文件保存。</p>

<h3 id="section-6">导入密钥</h3>

<p>未测试，使用gpg –import [Filename]导入公钥，如果不指定文件则从标准输入导入。</p>

<h3 id="section-7">注销密钥</h3>

<p>未测试，使用gpg –gen-revoke注销，需要用到密钥密码</p>

<h3 id="section-8">删除密钥</h3>

<p>未测试，gpg –delete-key</p>

<h3 id="section-9">编辑密钥</h3>

<p>gpg –edit-key是编辑密钥的指令，它能：</p>

<h4 id="section-10">签名</h4>

<p>没有导入的密钥，无法测试，本地生成的已经签过：gpg –edit-key UID sign</p>

<h4 id="section-11">修改密码</h4>

<p>未测试，gpg –edit-key UID passwd</p>

<h4 id="section-12">等……</h4>

<h2 id="section-13">加密文件</h2>

<p>加密一个文件，使用“gpg -e -r UID 文件名”来完成。加密后会生成一个原文件名.gpg的文件。</p>

<h2 id="section-14">解密文件</h2>

<p>解密文件的操作如下：</p>

<pre><code>$ gpg -d -r uidfile test.gpg
gpg: 由 3072 位的 ELG-E 密钥加密，钥匙号为 6D72E230、生成于 2014-12-14
      “uidfile (xxx) &lt;xxx@sina.com&gt;”
test
</code></pre>

<p>除前两行显示外的内容是GPG显示到标准输出的内容。它是解密后文件的内容。可以将它重定向生成文件获取解密的文件。可以看到，加密前文件的内容是test。</p>

<p>不知道是不是因为输出内容中有到非标准输出的内容，虽然进程的返回结果是0，但在expect这类脚本语言中会出现报错，无法正常执行。</p>

<p>如果密钥生成时设置了密码，在解密时会提示输入，如果输入不正解是无法解密的。</p>

<p>在UBUNTU环境中，如果输入过一次密码，那么之后都不用再输入，直到系统重新启动。</p>

<h2 id="section-15">一些参考</h2>

<p>由于应用更新等原因，网络上的信息需要“领会精神”，要看最准确的参考文档，还是要看最新的官方文档或man帮助。以下是一些中文的参考文章：</p>

<p>http://www.linuxfly.org/post/274/</p>

<p>https://www.gnupg.org/howtos/zh/GPGMiniHowto-1.html
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/">http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置octopress首页的日期格式]]></title>
    <link href="http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/"/>
    <updated>2015-01-02T19:49:30+08:00</updated>
    <id>http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi</id>
    <content type="html"><![CDATA[<p>通过_config.yml中的date_format参数设置对我目前使用的2.0版本的octopress的首页中的文章日期的显示不起作用，需要用其它方式进行设置。</p>

<!--more-->

<p>设置方式为，修改source/_includes/post/date.html文件，将其中的{{ page.date_time_html }}替换为（请自觉去掉“\”，因为octopress处理大括号的问题，不加就不能显示，加了又不对，下同）:</p>

<pre><code>\{\{ page.date | date: '%Y年%m月%d日' }}
</code></pre>

<p>单引号中的内容是Jekyll（也是octopress）的日期格式，在<a href="http://alanwsmith.com/jekyll-liquid-date-formatting-examples">此处</a>可以找到相关的例子。比如：</p>

<pre><code>\{\{ page.date | date: '%B %d, %Y' }}
</code></pre>

<p>会让日期显示为：</p>

<pre><code>January 02, 2015
</code></pre>

<p>可参考这个<a href="http://alanwsmith.com/jekyll-liquid-date-formatting-examples">Jekyll Date Formatting Examples</a>以及一个<a href="http://stackoverflow.com/questions/26458533/octopresss-date-format-not-working">我等了几个月的问题的回复</a>，这个回复中的第二个回复是正解。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/">http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络测试工具netperf]]></title>
    <link href="http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/"/>
    <updated>2014-12-10T22:00:06+08:00</updated>
    <id>http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf</id>
    <content type="html"><![CDATA[<p>一般我们进行网络测试，主要是测试网络的连通性、网络带宽、网络响应时间等。常用的工具包括ping、traceroute、telnet、ftp等。如测试网络连通性，可以使用ping，traceroute，如果测试防火墙是否配置正确，可以使用telnet和traceroute -p，使用ping命令可以测试网络延迟，ftp则用来测试网络带宽。</p>

<p>但如果需要做一些更为深入的测试，如测试不同包大小的不同类型的业务的网络处理能力，则需要更专业的工具，如netperf，iperf等。</p>

<!--more-->

<h2 id="netperf">netperf测试工具介绍</h2>

<p><a href="http://www.netperf.org/">netperf</a>是一个开源的网络性能测试工具。可以在AIX和LINUX平台上安装，支持跨平台使用。</p>

<p>netperf可以进行的测试TCP网络性能、UDP网络性能，并且可以模拟Client/Server长连接或短连接场景，因此能更接近实际网络的使用环境进行测试和评估。</p>

<h2 id="section">安装</h2>

<p>从<a href="http://www.netperf.org/">官方网站</a>可以下载源代码进行编译安装。安装过程基本上是老三步，即</p>

<pre><code>./configcure
make
make install
</code></pre>

<p>默认安装路径是/usr/local下的各目录。在AIX等系统中，可能需要自己设置PATH环境变量，或使用–prefix参数更改安装路径。</p>

<p>对于<em>SUSE</em>，在安装中发现，在内核版本为2.6.16(SUSE 10)时，会出现编译错误：</p>

<pre><code>nettest_omni.o: In function `recv_data_no_copy':
nettest_omni.c:(.text+0x6e44): undefined reference to `splice'
nettest_omni.c:(.text+0x6e7b): undefined reference to `splice'
collect2: ld returned 1 exit status
make[3]: *** [netperf] Error 1
make[3]: Leaving directory `/root/py/netperf-2.6.0/src'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/root/py/netperf-2.6.0/src'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/root/py/netperf-2.6.0'
</code></pre>

<p>经查，splice系统调用是在2.6.17内核版本以后出现的，因此换用SUSE 11编译通过。</p>

<p>如果是UBUNTU之类的版本，因为软件库中已经有了netperf，可以用包管理器安装。比如UBUNTU中使用：</p>

<pre><code>sudo apt-get install netperf
</code></pre>

<h2 id="section-1">使用</h2>

<h3 id="section-2">启动服务</h3>

<p>netperf包括两个程序。一个是客户端netperf，用于模拟各类网络行为。另一个为服务器程序netserver。用于接收客户端的请求。启动服务的操作类似于：</p>

<pre><code># netserver
Starting netserver with host 'IN(6)ADDR_ANY' port '12865' and family AF_UNSPEC
</code></pre>

<p>默认情况下TCP服务的监听启动在12865端口上。可以通过-p参数修改。</p>

<p>未发现使用了哪个UDP端口，估计是在测试时根据netperf启用的测试项目再启用端口的。</p>

<h3 id="netperf-1">netperf参数说明</h3>

<p>netperf的参数格式如下：</p>

<pre><code>netperf [global options] -- [test options] 
</code></pre>

<p>其中，global options为通用参数，所有测试项目都涉及或是公共的参数，常用的有：</p>

<p>-H 主机名或IP		指定运行netserver的服务器的IP</p>

<p>-l 测试时长		指定测试的时间长度，单位为秒</p>

<p>-t 测试项目		指定测试的内容。测试项目如下：</p>

<p>TCP批量数据传输测试                     TCP_STREAM</p>

<pre><code>                 TCP_SENDFILE

                 TCP_MAERTS
</code></pre>

<p>TCP请求应答（长连接）模式测试                     TCP_RR</p>

<pre><code>                 TCP_CRR
</code></pre>

<p>UCP批量数据传输测试                    UDP_STREAM</p>

<pre><code>                 UDP_RR

                 DLCO_STREAM

                 DLCO_RR

                 DLCL_STREAM

                 DLCL_RR

                 STREAM_STREAM

                 STREAM_RR

                 DG_STREAM

                 DG_RR

                 SCTP_STREAM

                 SCTP_STREAM_MANY

                 SCTP_RR

                 SCTP_RR_MANY

                 LOC_CPU

                 REM_CPU
</code></pre>

<p>test specific options是测试项用的参数，它与全局参数之间要用“–”分开类似</p>

<pre><code>netperf -H 127.0.0.1 -l 30 -- -m 2048
</code></pre>

<p>测试项参数与测试项目相关。</p>

<h2 id="section-3">常用测试项目</h2>

<h3 id="section-4">网络带宽测试</h3>

<p>带宽测试一般使用-t TCP_STREAM测试项，这也是netperf的默认测试项目。此项测试与ftp类似可以测试系统的带宽，但可以通过参数进行更多的设置。比如：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  16384    60.00    2760.70 
</code></pre>

<p>第一列为服务端接收包的Socket缓冲区大小，这里没87380</p>

<p>第二列为客户端发送数据的Socket缓冲区大小，这里为16384</p>

<p>第三列为发送的消息的大小，这里为16384</p>

<p>第四列为测试时长</p>

<p>第五列为测试的速率，单位为M，这里结果为2.7G。因为使用的是localhost，实际是在本机的内存中收发的数据。</p>

<p>TCP_STREAM的常用测试参数有：</p>

<p>-s 缓冲区大小	指定客户端发送数据的缓冲区大小
-S 缓冲区大小	指定服务端接收数据的缓冲区大小</p>

<p>-m 发送消息大小	单位为bytes</p>

<p>-M 接收消息大小	单位为bytes</p>

<p>可以调整这些参数，了解哪些因素对传输速率有影响。比如将发送缓冲变大，测试结果变化不大：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ netperf -H 127.0.0.1 -l 60 -- -s 65535
</span><span class="line">MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
</span><span class="line">Recv   Send    Send                          
</span><span class="line">Socket Socket  Message  Elapsed              
</span><span class="line">Size   Size    Size     Time     Throughput  
</span><span class="line">bytes  bytes   bytes    secs.    10^6bits/sec  
</span><span class="line">
</span><span class="line"> 87380 131070 131070    60.00    2672.42   </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而改变接收缓冲和发包大小，则可以提升性能：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -- -S 65535 
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

131070  16384  16384    60.00    3058.22   
$ netperf -H 127.0.0.1 -l 60 -- -m 65535
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  65535    60.00    3266.55   
</code></pre>

<h3 id="udp">UDP协议的传输性能</h3>

<p>与网络带宽测试类似，只是更换了协议，所以这个项目是UDP_STREAM：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t UDP_STREAM
MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Socket  Message  Elapsed      Messages                
Size    Size     Time         Okay Errors   Throughput
bytes   bytes    secs            #      #   10^6bits/sec

212992   65507   60.00      440506      0    3847.46
212992           60.00      433151           3783.22
</code></pre>

<p>与TCP_STREAM不太一样，测试结果中有两行数据。第一行是客户端的，第二行是服务端。</p>

<p>第一列为缓冲区大小，在netperf测试中，两端的缓冲区大小会设置成一样大。</p>

<p>第二列为消息大小</p>

<p>第三列为测试传输时间</p>

<p>第四列为传输数据包量，UDP由于协议不保证传输可靠性，收发消息数量不一样多，而且实际生产环境收包量可能比发包少得更多。从数据看，这个包数量应是每秒数量（消息大小和速度的单位不一样）</p>

<p>最后是测试的速率，可以看到要比TCP协议快一些。这是协议决定的。</p>

<h3 id="tcp">TCP长连接请求应答模式测试</h3>

<p>除了网络数据传输，大量的网络流量是请求/应答式的，即一方发送一个报文，另一方回复一个。而且通常这类请求和回复的报文大小不一样大，甚至差别很大。netperf可以简单模拟这类应用场景，进行网络性能测试。测试使用类型为TCP_RR。</p>

<p>最简单的TCP_RR测试如下：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_RR
MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  1        1       60.00    13517.65   
16384  87380 
</code></pre>

<p>测试结果分为两行，第一行是本地，第二行是远端（服务端）</p>

<p>第一列和第二列应该还是缓冲区，只是和STREAM测试的顺序相反。</p>

<p>第三、四列为请求和返回包的大小。默认为1位。</p>

<p>第五列为测试时间</p>

<p>第六列为交易速率，这次是笔数/每秒，不再是带宽。</p>

<p>默认的包大小实际业务中不可能发生，可以通过参数进行调整，来模拟真实的情况。使用测试参数-r 请求包大小,应答包大小（-r request,response）来测试。注意此参数单位为BYTES，实际的业务一般是以字节为单位的报文：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_RR -- -r 64,2048
MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  64       2048    60.00    13129.09   
16384  87380 
</code></pre>

<p>此测试使用8字节的请求，256字节的返应答包进行测试，测试结果相对默认值轻微下降。</p>

<h3 id="tcp-1">TCP短连接请求应答模式测试</h3>

<p>TCP请求的另一大类是类似HTTP业务的短连接请求应答报文。对应的测试项是TCP_CRR：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_CRR             
MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  1        1       60.00    2210.55   
16384  87380 
</code></pre>

<p>测试参数和显示与TCP_RR类似。由于业务类型的影响，速率降得比厉害。</p>

<h3 id="udp-1">UDP连接请求应答模式测试</h3>

<p>由于UDP协议的原因，UDP请求应答不分长短连接。只有UDP_RR一个测试项目，测试参数也类似TCP类的测试：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t UDP_RR              
MIGRATED UDP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

212992 212992 1        1       60.00    15837.63   
212992 212992
</code></pre>

<p>理论上，UDP的测试结果要好于TCP，但在实际网络中，可能受网络设备配置等影响，存在一定未知数。</p>

<h2 id="section-5">如何进行模拟测试</h2>

<p>首先需要搞好测试用例。要明确业务的类型，协议，好确定选择哪个测试项目，要了解业务的特性，如一般包的大小等信息，以便选择合适的参数。这些参数可以根据业务设计来确定，也可能需要通过业务监控数据来获取。例如通过监控数据中的最大流量和最大IO量，可以大致评估一下数据包的大小，当然这种评估很不精确。</p>

<p>由于决定网络性能的因素有一部分和配置相关，因此在测试中可以变更缓冲区大小等参数，以便了解是否需要对网络参数进行调整。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/">http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用calibre抓取RSS新闻制作电子书及推送到kindle]]></title>
    <link href="http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/"/>
    <updated>2014-12-08T20:52:45+08:00</updated>
    <id>http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle</id>
    <content type="html"><![CDATA[<p>calibre可以从RSS源抓取内容，转换成它所支持格式的电子书，还可以推送到阅读器设备。下面来看看在calibre图形界面和命令行下如何实现这些功能。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">在图形界面抓取新闻</a></li>
  <li><a href="#section-1">自定义新闻来源</a></li>
  <li><a href="#section-2">看看我们自定义了什么</a></li>
  <li><a href="#section-3">命令行下生成电子杂志</a></li>
  <li><a href="#kindle">命令行推送到Kindle</a></li>
  <li><a href="#section-4">简单定时推送的实现</a></li>
  <li><a href="#section-5">一些要注意的问题</a></li>
  <li><a href="#section-6">其它方法</a></li>
  <li><a href="#section-7">参考</a></li>
</ul>

<p>calibre可以从RSS源抓取内容，转换成它所支持格式的电子书，还可以推送到阅读器设备。下面来看看在calibre图形界面和命令行下如何实现这些功能。</p>

<h2 id="section">在图形界面抓取新闻</h2>

<p>打开calibre，在工具栏中选那个“抓取新闻”，会看到按语言分类的已经定义好的各类新闻源：</p>

<p><img src="http://pangyi.github.io/images/getnews.png" /></p>

<p>点一下“立即下载”就可以把新闻抓取为电子书了。如果设置了发送到KINDLE的邮箱配置，那么抓取完成后会自动发送邮件进行推送。</p>

<p>如果你有个24小时开机的电脑，可以设置一下计划下载，进行定时推送。</p>

<p>“删除指定天数前下载的新闻”，和“高级选项”页中的“最多保留份数”可以设置电子书的保存时间。当鼠标移动到此处时，就会自动显示帮助，可以自己看。需要说明的是，从我这看到的效果来说，这些选项只对Calibre自己有效。<em>对于Kindle</em>，报刊杂志类的书籍会保存14份，如果没有特意保留，那么最老的会覆盖——不过到目前为止我还没搞到那么多期呢。</p>

<h2 id="section-1">自定义新闻来源</h2>

<p>点击“抓取新闻”旁边的下拉按钮，选“添加自定义新闻源”，可以自己配置抓取的新闻：</p>

<p><img src="http://pangyi.github.io/images/add_onwer_news.png" /></p>

<p>配置方法就是找到你要抓取的新闻的rss地址，加入右下方的“将新闻加入订阅清单”的源网址处，自己起个名字，再点“添加源”。一个杂志可以加入多个源。在把所有的源加好后，修改一下“订阅清单标题”，其后<em>一定</em>要“添加/更新订阅清单”，这样才能把修改保存下来。否则一切都白费了。</p>

<h2 id="section-2">看看我们自定义了什么</h2>

<p>点击一下“切换到高级模式”，就能知道抓取新闻的配置是写在一个Python文件中的了。例如这个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">AdvancedUserRecipe1417937312</span><span class="p">(</span><span class="n">BasicNewsRecipe</span><span class="p">):</span>
</span><span class="line">    <span class="n">title</span>          <span class="o">=</span> <span class="s">u&#39;</span><span class="se">\u79d1\u6280\u4e71\u5f39</span><span class="s">&#39;</span>
</span><span class="line">    <span class="n">oldest_article</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">    <span class="n">max_articles_per_feed</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class="line">    <span class="n">auto_cleanup</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line">    <span class="n">feeds</span>          <span class="o">=</span> <span class="p">[(</span><span class="s">u&#39;</span><span class="se">\u79d1\u5b66\u677e\u9f20\u4f1a</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://songshuhui.net/feed&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u77e5\u4e4e\u6bcf\u65e5\u7cbe\u9009</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://www.zhihu.com/rss&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u679c\u58f3\u7f51</span><span class="s"> guokr.com&#39;</span><span class="p">,</span> <span class="s">u&#39;http://www.guokr.com/rss/&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u714e\u86cb</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://jandan.net/feed&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Calibre用Python语言把配置保存为一个.recipe的文件。后面用命令行生成杂志的操作会用到这些文件。点击“显示订阅清单文件”，会打开存入自定义源的配置文件的目录。可以从这里获得.recipe文件用来在命令行下进行操作。</p>

<h2 id="section-3">命令行下生成电子杂志</h2>

<p>Calibre附带的命令行工具ebook-convert可以完成生成电子书的操作。比如使用：</p>

<pre><code>ebook-convert 科技乱弹.recipe .mobi
</code></pre>

<p>这会生成一个同名的mobi文件，可以供kindle使用。与在Calibre中生成的电子书的差别是它的标题中包括了日期的一些信息。实际上这更便于推送到Kindle。</p>

<p>.recipe文件可以自己定义，然后复制过来，或者到网上找别人做的配置文件。在尝试搞自己的自动推送功能时，发现了一些.recipe文件的来源，不过不一定适用于所有的Calibre：</p>

<p>https://github.com/RichardUSTC/calibre-recipes</p>

<p>https://github.com/fengli/ikindle_recipe</p>

<h2 id="kindle">命令行推送到Kindle</h2>

<p>Calibre也有命令行的邮件发送工具，可以用来进行推送杂志到kindle的工作：</p>

<pre><code>calibre-smtp --attachment 推送的文件名.mobi --relay 邮箱的smtp服务器域名 --port smtp地址（一般是25） --username 邮箱账号 --password "邮箱密码" --encryption-method TLS 邮箱名 Kindle设备推送邮箱（类似XXX@kindle.cn） "邮件正文，内容随便" -v -s "convert"
</code></pre>

<p>-s指定邮件主题，推送到Kindle必须是convert。–attachment是指定附件，就是要推送的书了。</p>

<p>也可以使用其它的工具。当然最好是命令行下能进行发送的。因为这样才能做后面的定时发送。比如我用了mutt，因为我用UBUNTU。怎么使用参考相关文档就可以了。</p>

<h2 id="section-4">简单定时推送的实现</h2>

<p>工具都备齐了，实现定时发送就没什么问题了。只要使用定时调度工具，定时启动命令行脚本就行了。在各类操作系统上都有定时调度工具，如Windows的计划任务，Unix/Linux的Crontab工具等。我当然是用Crontab的，附一个简单的脚本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># recipe文件路径</span>
</span><span class="line"><span class="nv">re_path</span><span class="o">=</span><span class="nv">$1</span>
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> <span class="nv">$re_path</span>
</span><span class="line"><span class="k">for</span> name in <span class="sb">`</span>ls *.recipe<span class="p">|</span>awk -F <span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class="line"><span class="k">do</span>
</span><span class="line">	<span class="nb">echo</span> <span class="s2">&quot;生成杂志$name&quot;</span>
</span><span class="line">	ebook-convert <span class="k">${</span><span class="nv">name</span><span class="k">}</span>.recipe .mobi
</span><span class="line">	sleep 3
</span><span class="line">	<span class="nb">echo</span> <span class="s2">&quot;${name}&quot;</span><span class="p">|</span>mutt -s convert amaoxiong_k@kindle.cn -a <span class="k">${</span><span class="nv">name</span><span class="k">}</span>.mobi
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>抛砖引玉而而已。我把生成的.recipe文件复制到单独的目录并重新命名，这样可以用这个脚本通过设定不同的执行时间，将不同目录中的recipe在不同的时间推送到Kindle。</p>

<p>目前基本功能是有了，以后有时间再搞搞密码加密解密，失败重新发送之类的。</p>

<h2 id="section-5">一些要注意的问题</h2>

<p>使用Kindle的推送功能，当然<em>别忘了把邮箱加入到kindle的认可列表中</em>。可以用Calibre的工具进行测试和手工推送一下。</p>

<p>使用Calibre抓取推送时，发生过首次推送后之后就不成功的情况，后将Calibre中的书名改了一下，手工推送就成功能了。</p>

<p>如果经常推送不成功，可以看看<em>生成的杂志是不是太大</em>。这可能造成发送邮件失败。降低电子书大小最根本的是减少抓取的内容，包括少加几个源，减少最老文章天数和每个源的最多文章数等。</p>

<h2 id="section-6">其它方法</h2>

<p><a href="https://github.com/cdhigh/KindleEar">KindleEar</a>是个运行在Google App Engine(GAE)上的Kindle个人推送服务器，可以自动抓取和推送RSS。由于是运行在云上的，就不用使用自己的电脑，也不用到点或一直开机了。最近不怎么翻，目前没研究。</p>

<p>以前爱看豆也提供类似服务，不过最近不知道还能不能用。另外网上有些收费的类似服务可以使用，也不介绍了，各位自己去找就行。</p>

<h2 id="section-7">参考</h2>

<p>除了上面提到的东东，下面是成此文所参考的一些网文：</p>

<p>http://zodiac1111.github.io/blog/rss2kindle-use-calibre/</p>

<p>http://richardustc.github.io/blog/2013/06/calibre-recipe-howto/</p>

<p>对Calibre转换电子书格式的说明，比较详细，但和本文关系不太大：http://blog.csdn.net/ccwwff/article/details/5982552</p>

<p>手工制作电子书：http://www.360doc.com/content/11/0224/12/3968002_95668374.shtml</p>

<p>如何向Kindle推送：http://www.amazon.cn/gp/help/customer/display.html?ie=UTF8&amp;nodeId=200767340</p>

<p>IBM（看来是某粉的作品）的Calibre介绍，算是最全面的中文文档了：http://www.ibm.com/developerworks/cn/opensource/os-calibre/index.html</p>

<p>另外man和Calibre官方网站上的资料是最重要的参考。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/">http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[增加octopress的说明和目录的VIM函数和快捷键配置]]></title>
    <link href="http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/"/>
    <updated>2014-11-23T16:25:39+08:00</updated>
    <id>http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi</id>
    <content type="html"><![CDATA[<p>照猫画虎，写了一个函数，并加了一个快捷键，为octopress文章增加一些特定的内容，好在文章列表和首页处显示文章简介或摘要，并给文章建立目录。</p>

<p>之所以把这两部分合并在一起，是因为加了目录后，目录就成了文章最前面的内容，这时目录会作为文章开头内容显示在首页，不大好看，所以这两个东东一般是要配合使用的。</p>

<p>所需要增加的内容如下：</p>

<pre><code>&lt;!-- more --&gt;

* list element with functor item
{:toc}
</code></pre>

<p>实现这一功能的函数放在.vimrc中，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">map <span class="p">&lt;</span>F7<span class="p">&gt;</span> :<span class="k">call</span> OctopressIndex<span class="p">()&lt;</span><span class="k">cr</span><span class="p">&gt;</span>&#39;<span class="k">s</span>
</span><span class="line"><span class="k">function</span> OctopressIndex<span class="p">()</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">18</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">19</span><span class="p">,</span><span class="s2">&quot;&lt;!-- more --&gt;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">21</span><span class="p">,</span><span class="s2">&quot;* list element with functor item&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">22</span><span class="p">,</span><span class="s2">&quot;{:toc}&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    echohl WarningMsg <span class="p">|</span> echo <span class="s2">&quot;Successful in adding the Octopress Index and read on.&quot;</span> <span class="p">|</span> echohl None
</span><span class="line"><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>功能就是从19行起，插入要增加的内容。快捷键是F7</p>

<p>这里要说明一下，因为我的文章是先在VimWiki中写的，前面会加一个文件头，因此要从19行加起。写完之后，我会利用vimdiff的功能，将内容合并到博客文章中发布。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/">http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test中和 空格]]></title>
    <link href="http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/"/>
    <updated>2014-11-19T21:58:20+08:00</updated>
    <id>http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/">http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test测试]]></title>
    <link href="http://pangyi.github.io/blog/20141119/testce-shi/"/>
    <updated>2014-11-19T21:09:52+08:00</updated>
    <id>http://pangyi.github.io/blog/20141119/testce-shi</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141119/testce-shi/">http://pangyi.github.io/blog/20141119/testce-shi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试插件]]></title>
    <link href="http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/"/>
    <updated>2014-11-18T22:53:08+08:00</updated>
    <id>http://pangyi.github.io/blog/20141118/ce-shi-cha-jian</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/">http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试文件头]]></title>
    <link href="http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/"/>
    <updated>2014-11-05T23:03:36+08:00</updated>
    <id>http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/">http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试o]]></title>
    <link href="http://pangyi.github.io/blog/20141103/ce-shi-o/"/>
    <updated>2014-11-03T22:03:46+08:00</updated>
    <id>http://pangyi.github.io/blog/20141103/ce-shi-o</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141103/ce-shi-o/">http://pangyi.github.io/blog/20141103/ce-shi-o/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试]]></title>
    <link href="http://pangyi.github.io/blog/20141103/ce-shi/"/>
    <updated>2014-11-03T21:42:41+08:00</updated>
    <id>http://pangyi.github.io/blog/20141103/ce-shi</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141103/ce-shi/">http://pangyi.github.io/blog/20141103/ce-shi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试代码高亮]]></title>
    <link href="http://pangyi.github.io/blog/20141103/ce-shi-dai-ma-gao-liang/"/>
    <updated>2014-11-03T12:24:53+08:00</updated>
    <id>http://pangyi.github.io/blog/20141103/ce-shi-dai-ma-gao-liang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">测试方法</a>    <ul>
      <li><a href="#section-1">测试代码</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">测试方法</h1>

<h2 id="section-1">测试代码</h2>

<p>源代码，按Markdown语法进行默认的代码高亮的效果：</p>

<pre><code>let g:octopress_path = "path/to/dir"
</code></pre>

<p>使用octopress的代码高亮进行显示的效果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试语法高亮</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:octopress_path <span class="p">=</span> <span class="s2">&quot;path/to/dir&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>网上的一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Discover if a number is prime</span><a href="http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class="line"> <span class="k">def</span> <span class="nf">prime?</span>
</span><span class="line">  <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再加一行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">``` [language] [title] [url] [link text]
</span><span class="line">code snippet</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>&#8220;`</p>

<p>测试
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20141103/ce-shi-dai-ma-gao-liang/">http://pangyi.github.io/blog/20141103/ce-shi-dai-ma-gao-liang/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Tag]]></title>
    <link href="http://pangyi.github.io/blog/20141028/test-tag/"/>
    <updated>2014-10-28T00:42:00+08:00</updated>
    <id>http://pangyi.github.io/blog/20141028/test-tag</id>
    <content type="html"><![CDATA[<p>i</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141028/test-tag/">http://pangyi.github.io/blog/20141028/test-tag/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octoedit]]></title>
    <link href="http://pangyi.github.io/blog/20141022/octoedit/"/>
    <updated>2014-10-22T20:33:00+08:00</updated>
    <id>http://pangyi.github.io/blog/20141022/octoedit</id>
    <content type="html"><![CDATA[<p>test octopressediter
<!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#test1">test1</a></li>
  <li><a href="#test2">test2</a>    <ul>
      <li><a href="#ttest1">ttest1</a></li>
      <li><a href="#ttest2">ttest2</a></li>
      <li><a href="#section">测试</a></li>
    </ul>
  </li>
</ul>

<h2 id="test1">test1</h2>

<p>333</p>

<h2 id="test2">test2</h2>

<h3 id="ttest1">ttest1</h3>

<p>2</p>

<h3 id="ttest2">ttest2</h3>

<p>333</p>

<h3 id="section">测试</h3>
<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141022/octoedit/">http://pangyi.github.io/blog/20141022/octoedit/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testtest]]></title>
    <link href="http://pangyi.github.io/blog/20141015/testtest/"/>
    <updated>2014-10-15T23:45:52+08:00</updated>
    <id>http://pangyi.github.io/blog/20141015/testtest</id>
    <content type="html"><![CDATA[<p>测试摘要显示_</p>

<p>test
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20141015/testtest/">http://pangyi.github.io/blog/20141015/testtest/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Again]]></title>
    <link href="http://pangyi.github.io/blog/20140914/test-again/"/>
    <updated>2014-09-14T20:51:57+08:00</updated>
    <id>http://pangyi.github.io/blog/20140914/test-again</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20140914/test-again/">http://pangyi.github.io/blog/20140914/test-again/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test With Octopress]]></title>
    <link href="http://pangyi.github.io/blog/20140914/test-with-octopress/"/>
    <updated>2014-09-14T09:37:16+08:00</updated>
    <id>http://pangyi.github.io/blog/20140914/test-with-octopress</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20140914/test-with-octopress/">http://pangyi.github.io/blog/20140914/test-with-octopress/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
</feed>
