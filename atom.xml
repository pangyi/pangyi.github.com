<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[松鼠窝]]></title>
  <link href="http://pangyi.github.io/atom.xml" rel="self"/>
  <link href="http://pangyi.github.io/"/>
  <updated>2015-02-23T16:06:37+08:00</updated>
  <id>http://pangyi.github.io/</id>
  <author>
    <name><![CDATA[PangYi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在ubuntu14版本上使用dnsmasq配置自定义的简易DNS服务]]></title>
    <link href="http://pangyi.github.io/blog/20150223/zai-ubuntu14ban-ben-shang-shi-yong-dnsmasqpei-zhi-zi-ding-yi-de-jian-yi-dnsfu-wu/"/>
    <updated>2015-02-23T15:59:52+08:00</updated>
    <id>http://pangyi.github.io/blog/20150223/zai-ubuntu14ban-ben-shang-shi-yong-dnsmasqpei-zhi-zi-ding-yi-de-jian-yi-dnsfu-wu</id>
    <content type="html"><![CDATA[<p>现在的UBUNTU桌面发行版已经自带了dnsmasq，如何再配置自己的DNS配置？</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#ubuntudnsmasq">UBUNTU桌面版中的dnsmasq</a></li>
  <li><a href="#dnsmasq">叠床架屋？——启用dnsmasq服务</a></li>
  <li><a href="#dns">简单的DNS配置</a></li>
  <li><a href="#section">参考</a></li>
</ul>

<h2 id="ubuntudnsmasq">UBUNTU桌面版中的dnsmasq</h2>

<p>不记得从哪个版本开始，大概是13.04以后，UBUNTU的网络设置工具会自带一下dnsmasq工具，用于适应各种不同网卡的DNS配置。可以看到进程信息类似：</p>

<pre><code>nobody    2138  1197  0 09:50 ?        00:00:00 /usr/sbin/dnsmasq --no-resolv --keep-in-foreground --no-hosts --bind-interfaces --pid-file=/run/sendsigs.omit.d/network-manager.dnsmasq.pid --listen-address=127.0.1.1 --conf-file=/var/run/NetworkManager/dnsmasq.conf --cache-size=0 --proxy-dnssec --enable-dbus=org.freedesktop.NetworkManager.dnsmasq --conf-dir=/etc/NetworkManager/dnsmasq.d
</code></pre>

<p>这个dnsmasq的作用，是把NetWorkManager中的DNS服务器配置作为上级DNS，在127.0.1.1这个地址虚拟一个本地DNS服务。而UBUNTU会把本机的/etc/resolv.conf中的内容改为：</p>

<pre><code># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 127.0.1.1
search router
</code></pre>

<h2 id="dnsmasq">叠床架屋？——启用dnsmasq服务</h2>

<p>由于这个dnsmasq是属于dnsmasq-base包的，只有运行程序，没有安装配置文件和开机启动服务，因此可以通过配置dnsmasq服务来再启动一个本地简易DNS，同时还继承原有配置。</p>

<p>首先需要安装dnsmasq包，即：</p>

<pre><code>sudo apt-get install dnsmasq
</code></pre>

<p>此软件包包括/etc/dnsmasq.conf，/etc/dnsmasq.d，/etc/init.d/dnsmasq等配置文件，实现了开机从配置文件启动。</p>

<h2 id="dns">简单的DNS配置</h2>

<p>配置格式为：address=/域名/IP地址</p>

<p>域名可以使用“泛域名”，如下面的配置：</p>

<pre><code>address=/.squirrel.org/127.0.0.1
</code></pre>

<p>这一配置将所有squirrel.org和它的下级域名都解析为127.0.0.1了。</p>

<h2 id="section">参考</h2>

<p>http://www.cnblogs.com/sink_cup/archive/2012/08/17/router_dnsmasq_android_hosts.html
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20150223/zai-ubuntu14ban-ben-shang-shi-yong-dnsmasqpei-zhi-zi-ding-yi-de-jian-yi-dnsfu-wu/">http://pangyi.github.io/blog/20150223/zai-ubuntu14ban-ben-shang-shi-yong-dnsmasqpei-zhi-zi-ding-yi-de-jian-yi-dnsfu-wu/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用友言做octopress的评论系统，使用加网做分享]]></title>
    <link href="http://pangyi.github.io/blog/20150125/shi-yong-you-yan-zuo-octopressde-ping-lun-xi-tong-,shi-yong-jia-wang-zuo-fen-xiang/"/>
    <updated>2015-01-25T17:31:02+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/shi-yong-you-yan-zuo-octopressde-ping-lun-xi-tong-,shi-yong-jia-wang-zuo-fen-xiang</id>
    <content type="html"><![CDATA[<p>友言、加网是一家子。正好各做各用，用友言替代disqus评论系统，用加网做分享到微X的功能。</p>

<!-- more -->

<h2 id="section">注册和获取代码</h2>

<p>友言、加网是一家子，只要注册加网就行了。登录后，在JiaThis中有代码一项进入并进行定制，然后获取代码，在友言中有获取代码，在此获取代码。</p>

<h2 id="section-1">新建显示评论和分享的页面文件</h2>

<p>新建source/_includes/post/share_comment.html，将获取的代码复制到此处。</p>

<p>如果想把如分享按钮显示在侧栏，则需要参考对侧栏的定制，将加网的代码放进去。</p>

<h2 id="section-2">配置显示开头</h2>

<p>在_config.yml中添加开关：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1"># jiathis</span>
</span><span class="line"><span class="l-Scalar-Plain">comment_share</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>source/_includes/post/sharing.html中添加如下代码（请自觉将\去掉）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">&lt;!-- JiaThis Button --&gt;</span>
</span><span class="line">  <span class="l-Scalar-Plain">\{\% if site.comment_share %}</span>
</span><span class="line">    <span class="l-Scalar-Plain">\{\% include post/share_comment.html %}</span>
</span><span class="line">  <span class="l-Scalar-Plain">\{\% endif %}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">友言网的验证</h2>

<p>友言网验证后才能进行设置。登录友言网后，会看到列出了使用友言代码的网站。在“状态”处可以看到验证状态。在操作中点“验证”，在“请选择验证方法”处选择“上传html文件”，之后点“下载验证文件”，获得验证文件。验证文件是个空文件。将它放到source目录下，做rake deploy操作，就可以自动验证了。</p>

<p>验证后可以对评论的显示进行设置调整。
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/shi-yong-you-yan-zuo-octopressde-ping-lun-xi-tong-,shi-yong-jia-wang-zuo-fen-xiang/">http://pangyi.github.io/blog/20150125/shi-yong-you-yan-zuo-octopressde-ping-lun-xi-tong-,shi-yong-jia-wang-zuo-fen-xiang/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在octopress中增加“返回顶部”按钮]]></title>
    <link href="http://pangyi.github.io/blog/20150125/zai-octopresszhong-zeng-jia-fan-hui-ding-bu-an-niu/"/>
    <updated>2015-01-25T17:07:51+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/zai-octopresszhong-zeng-jia-fan-hui-ding-bu-an-niu</id>
    <content type="html"><![CDATA[<p>通过“返回顶部”按钮，可以快速返回页首。配置按照<a href="http://812lcl.com/blog/2013/10/27/octopresszhu-ti-yang-shi-xiu-gai/">Octopress主题样式修改</a>一文。但照着做下来并不能实现配置。因此到疑似作者812lcl的github仓库中找了最新版本的配置。</p>

<!-- more -->

<h2 id="javascripts">javascripts脚本</h2>

<p>新建一个文件source/javascripts/top.js。它的最新版本在：</p>

<p>https://github.com/812lcl/812lcl.github.com/blob/source/source/javascripts/top.js</p>

<h2 id="section">显示按钮</h2>

<p>显示按钮需要新建source/_includes/custom/totop.html。它的最近版本在：
https://github.com/812lcl/812lcl.github.com/blob/source/source/_includes/custom/totop.html</p>

<p>这里指定了调用的javscripts的文件名，按钮图片的文件名等，如right:180px指定了按钮距离页面右侧的举例，可以通过调整它来调整显示效果。</p>

<h2 id="section-1">按钮图片</h2>

<p>从上面可以看出按钮文件应在source/images中。保存一个top.png图片到这里，就可以显示按钮了。</p>

<p>一开始把图片放到了images中，而不是source/images中，造成只显示了“返回顶部”。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/zai-octopresszhong-zeng-jia-fan-hui-ding-bu-an-niu/">http://pangyi.github.io/blog/20150125/zai-octopresszhong-zeng-jia-fan-hui-ding-bu-an-niu/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让octopress支持标签（tag）]]></title>
    <link href="http://pangyi.github.io/blog/20150125/rang-octopresszhi-chi-biao-qian-(tag)/"/>
    <updated>2015-01-25T16:30:25+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/rang-octopresszhi-chi-biao-qian-(tag)</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">安装插件</a>    <ul>
      <li><a href="#octopress-tag-cloud">octopress-tag-cloud</a></li>
    </ul>
  </li>
  <li><a href="#section-1">在侧边栏显示标签云</a></li>
  <li><a href="#section-2">使用</a></li>
  <li><a href="#section-3">参考</a></li>
</ul>

<h2 id="section">安装插件</h2>

<p>目前有多个插件实现标签功能。其中一个是octopress<a href="https://github.com/tokkonopapa/octopress-tagcloud">官方推荐版本</a>，据说不支持多标签。还有些人用的是“3D”标签云，风格上我不是太喜欢。最终选用的是robbyedwards的一组插件。这组插件有两个，一个是<a href="https://github.com/robbyedwards/octopress-tag-pages">octopress-tag-pages</a>，用于生成标签页面，另一个是<a href="https://github.com/robbyedwards/octopress-tag-cloud">octopress-tag-cloud</a>，用于显示实现标签云功能。</p>

<!-- more -->
<p>### octopress-tag-pages</p>

<p>首先安装octopress-tag-page。从上面链接处得到插件，复制这些文件到octopress的相同路径：</p>

<p>plugins/tag_generator.rb</p>

<p>source/_includes/custom/tag_feed.xml</p>

<p>source/_includes/post/tags.html</p>

<p>source/_layouts/tag_index.html</p>

<p>其中tag_generator.rb和tag_feed.xml是必须的，其它据网上的一些人说是可选的。</p>

<p>另外一些文件是同名文件，如果复制过来一方面会影响已经配置的功能，另外可能导致发生一些问题（可能是版本兼容的问题造成的）。</p>

<p>这个插件不需要做配置。</p>

<h3 id="octopress-tag-cloud">octopress-tag-cloud</h3>

<p>然后安装octopress-tag-cloud。在上面链接处得到插件，同样复制一些文件到octopress的相同路径：</p>

<p>plugins/tag_cloud.rb</p>

<p>source/_includes/custom/asides/tags.html</p>

<p>tag_cloud.rb为必须。tags.html为在侧边栏显示标签的示例。可以参照它进行配置。</p>

<h2 id="section-1">在侧边栏显示标签云</h2>

<p>在_config.yml中的default_asides:中增加custom/asides/tags.html，用于在侧边栏显示标签云。如果想汉化，则修改tags.html等文件即可。</p>

<h2 id="section-2">使用</h2>

<p>在新建的博客文件中加入一行“tags: ”，类似：</p>

<pre><code>---
layout: post
title: "test tag"
published: true
date: 2014-10-28 00:42
comments: true
tags: [扩展, ttt]
categories: 
---
</code></pre>

<p>这样会给这一博文增加两个标签，使标签与分类对文章进行不同维度的分类。</p>

<p>当有文章有多个标签时，在执行rake generate时会出现类似如下问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake generate
</span><span class="line">(in /ubdata/octopress)
</span><span class="line">## Generating Site with Jekyll
</span><span class="line">identical source/stylesheets/screen.css 
</span><span class="line">Configuration file: /ubdata/octopress/_config.yml
</span><span class="line">            Source: source
</span><span class="line">       Destination: public
</span><span class="line">      Generating... 
</span><span class="line">  Liquid Exception: comparison of Array with Array failed in _layouts/page.html
</span><span class="line">jekyll 2.4.0 | Error:  comparison of Array with Array failed
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>经十几天的反复测试，发现在source/_includes/custom/asides/tags.html如果加了“limit”参数，就会出现问题。去掉就好了。</p>

<p>另一个问题是2.0版本的ocroptrss调用的generate操作会执行plugings中的所有插件，所以会报一些错，忽略即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake generate
</span><span class="line">(in /ubdata/octopress)
</span><span class="line">## Generating Site with Jekyll
</span><span class="line">identical source/stylesheets/screen.css 
</span><span class="line">Configuration file: /ubdata/octopress/_config.yml
</span><span class="line">            Source: source
</span><span class="line">       Destination: public
</span><span class="line">      Generating... 
</span><span class="line">     Build Warning: Layout 'nil' requested in tags/kuo-zhan/atom.xml does not exist.
</span><span class="line">     Build Warning: Layout 'nil' requested in tags/ttt/atom.xml does not exist.
</span><span class="line">     Build Warning: Layout 'nil' requested in tags/kuo-zhan/atom.xml does not exist.
</span><span class="line">     Build Warning: Layout 'nil' requested in tags/ttt/atom.xml does not exist.
</span><span class="line">                    done.
</span><span class="line"> Auto-regeneration: disabled. Use --watch to enable.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">参考</h2>

<p>http://codemacro.com/2012/07/18/add-tag-to-octopress/</p>

<p>http://loudou.info/blog/2014/02/15/wei-octopress-tian-jia-tag-gong-neng/</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/rang-octopresszhi-chi-biao-qian-(tag)/">http://pangyi.github.io/blog/20150125/rang-octopresszhi-chi-biao-qian-(tag)/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress文章加入原文链接]]></title>
    <link href="http://pangyi.github.io/blog/20150125/wei-octopresswen-zhang-jia-ru-yuan-wen-lian-jie/"/>
    <updated>2015-01-25T16:11:17+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/wei-octopresswen-zhang-jia-ru-yuan-wen-lian-jie</id>
    <content type="html"><![CDATA[<p>给博文加入原文链接的作用不消多说。由于在网上找的到诸篇文章或年久有变，或有重要的错误，因此自己总结记录一下，以作备忘。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#postfooterfilterrb">增加post_footer_filter.rb插件</a></li>
  <li><a href="#section">对显示信息的定制</a></li>
  <li><a href="#section-1">将链接信息与文章内容区分出来</a></li>
  <li><a href="#section-2">相关文章</a></li>
</ul>

<h2 id="postfooterfilterrb">增加post_footer_filter.rb插件</h2>

<p>此部分网上有多个内容相同的博文，但按其中内容增加插件后，在执行rake generate时会出现类似post_filters插件不存在之类的错误。</p>

<p>检查了一下，2.0版本的octopress中没有post_filters.rb这个插件，因此需要对插件进行修改。最终在疑似插件首发引用者的github中找到了一个更新的插件，内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># post_footer_filter.rb</span>
</span><span class="line"><span class="c1"># Append every post some footer infomation like original url</span>
</span><span class="line"><span class="c1"># Kevin Lynx</span>
</span><span class="line"><span class="c1"># 09.01.2014</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;octopress-hooks&#39;</span>
</span><span class="line"><span class="k">module</span> <span class="nn">AppendFooterFilter</span>
</span><span class="line"><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class="line"><span class="n">author</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;author&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">url</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;url&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">pre</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;original_url_pre&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">+</span> <span class="sx">%Q[&lt;p class=&#39;post-footer&#39;&gt;</span>
</span><span class="line"><span class="si">#{</span><span class="n">pre</span> <span class="ow">or</span> <span class="s2">&quot;original link:&quot;</span><span class="si">}</span><span class="sx"></span>
</span><span class="line"><span class="sx">&lt;a href=&#39;</span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">full_url</span><span class="si">}</span><span class="sx">&#39;&gt;</span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">full_url</span><span class="si">}</span><span class="sx">&lt;/a&gt;&lt;br/&gt;</span>
</span><span class="line"><span class="sx">written by &lt;a href=&#39;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sx">&#39;&gt;</span><span class="si">#{</span><span class="n">author</span><span class="si">}</span><span class="sx">&lt;/a&gt;</span>
</span><span class="line"><span class="sx">&amp;nbsp;posted at &lt;a href=&#39;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sx">&#39;&gt;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sx">&lt;/a&gt;</span>
</span><span class="line"><span class="sx">&lt;/p&gt;]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="k">class</span> <span class="nc">PostFilters</span> <span class="o">&lt;</span> <span class="no">Octopress</span><span class="o">::</span><span class="no">Hooks</span><span class="o">::</span><span class="no">Post</span>
</span><span class="line"><span class="k">def</span> <span class="nf">pre_render</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class="line"><span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="no">AppendFooterFilter</span><span class="o">::</span><span class="n">append</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>复制时没有加缩进，想看原版可以到此处：https://github.com/kevinlynx/codemacro-source/blob/master/plugins/post_footer_filter.rb</p>

<p>此后在文章结尾处就有了原文链接信息了</p>

<h2 id="section">对显示信息的定制</h2>

<p>从插件内容中可以看出，默认显示在链接之前的“original link:”可以通过original_url_pre参数指定。只需要在_config.yml中加入</p>

<pre><code>original_url_pre: "显示信息"
</code></pre>

<p>从插件内容中可以看出，其它各项取自_config.yml已有的变量，因此可以通过自己定义变量或直接修改插件内容来改变显示信息。</p>

<p><em>注意：</em> 在<a href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/">为octopress每篇文章添加一个文章信息</a>一文中，误把original_url_pre写成了origional_url_pre，导致无法正确显示。</p>

<h2 id="section-1">将链接信息与文章内容区分出来</h2>

<p>默认状态下，加入的链接信息与文章内容在显示上无法区分。可以在sass/custom/_styles.scss中加入一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nc">.post-footer</span><span class="p">{</span><span class="na">margin-top</span><span class="o">:</span><span class="mi">10</span><span class="kt">px</span><span class="p">;</span><span class="na">padding</span><span class="o">:</span><span class="mi">5</span><span class="kt">px</span><span class="p">;</span><span class="nt">background</span><span class="nd">:none</span> <span class="nt">repeat</span> <span class="nt">scroll</span> <span class="nt">0pt</span> <span class="nt">0pt</span> <span class="nn">#eee</span><span class="o">;</span><span class="nt">font-size</span><span class="nd">:90</span><span class="err">%</span><span class="o">;</span><span class="nt">color</span><span class="nd">:gray</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>注意</em> 网上不止一处把文件名写成了_style.scss。很无语。</p>

<h2 id="section-2">相关文章</h2>

<p><a href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/">为octopress每篇文章添加一个文章信息</a>，其它文章都引用了它。</p>

<p>两个犯了同样错误的文章：</p>

<p>http://biaobiaoqi.github.io/blog/2013/07/10/decorate-octopress/</p>

<p>http://812lcl.com/blog/2013/10/26/octopressce-bian-lan-ji-ping-lun-xi-tong-ding-zhi/</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/wei-octopresswen-zhang-jia-ru-yuan-wen-lian-jie/">http://pangyi.github.io/blog/20150125/wei-octopresswen-zhang-jia-ru-yuan-wen-lian-jie/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用中经验总结]]></title>
    <link href="http://pangyi.github.io/blog/20150125/octopressshi-yong-zhong-jing-yan-zong-jie/"/>
    <updated>2015-01-25T15:59:17+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/octopressshi-yong-zhong-jing-yan-zong-jie</id>
    <content type="html"><![CDATA[<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">找到最新的更新</a></li>
  <li><a href="#rake-generate">安装了一些插件后在rake generate时出现的一些莫名其妙</a></li>
  <li><a href="#section-1">首页显示摘要</a></li>
</ul>

<h2 id="section">找到最新的更新</h2>

<p>有时在网上找到的资料，因为时间的关系，或由于一些笔误，总是配置不对，又无法找到更新的说明。</p>

<p>由于octopress的博客很多是搭建在github上的，如果文档作者的博客仍使用octopress，那么他十有八九会在github上建有自己的博客，同时，很多人会用github管理自己的octopress配置，这时，就可以利用这一点获取更新后的配置。</p>

<p>例如《为octopress每篇文章添加一个文章信息》的作者的博客地址是http://codemacro.com/ 猜测他（她）在github上的仓库名应与codemacro有关。那么到github.com上搜索，找到两个仓库，一个为kevinlynx/codemacro-source，说明为source code of codemacro，另一个为kevinlynx/codemacro，说明为my personal blog 。基本可以知道前一个是保存配置的。进入仓库，找到https://github.com/kevinlynx/codemacro-source/blob/master/plugins/post_footer_filter.rb ，就找到了插入原文链接的插件的最新更新。</p>

<h2 id="rake-generate">安装了一些插件后在rake generate时出现的一些莫名其妙</h2>

<p>新版本的rake generate是执行的system “jekyll build”。这个操作会执行plugins目录下的所有ruby文件。所以（似乎不应该这么做呢）有时会有一些莫名其妙的事情发生。</p>

<p>处理方法，一种是不理。如果不理不行，或者实在太烦，可以把ruby插件换个目录，不过这样需要自己修改很多东西。</p>

<h2 id="section-1">首页显示摘要</h2>

<p>默认情况下在首页每篇博文会显示全文。如果文章比较长，那么全部显示就会让首页也比较长，如果要是多来几个比较长的就没法看了。</p>

<p>octopress的解决方式是加一行&lt;!– more –&gt;，在此之前的内容就会成为在首页显示的摘要内容，在点击“read on”按钮或标题后进入博客页面再显示完整内容。</p>

<p>“&lt;!– more –&gt;”只是一个摘要标识符，可以在_config.yml中通过excerpt_separator参数指定。由于使用了HTML的注释的写法，在博客正文中不会出现摘要标识符，标识符前的内容会在博客正文中显示。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/octopressshi-yong-zhong-jing-yan-zong-jie/">http://pangyi.github.io/blog/20150125/octopressshi-yong-zhong-jing-yan-zong-jie/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu中octopress安装]]></title>
    <link href="http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang/"/>
    <updated>2015-01-25T15:24:46+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang</id>
    <content type="html"><![CDATA[<p>这是一篇按官方说明进行安装的说明，但后记中记录了如何使用Ubuntu自己的包管理系统中包含的ruby版本进行安装的方法。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">安装条件</a></li>
  <li><a href="#octopress">Octopress的安装</a>    <ul>
      <li><a href="#ubuntu">后记——使用UBUNTU自带版本安装</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">安装条件</h1>

<p>要有git，要有ruby1.9.3版，要有rvm或者rbenv。</p>

<p>不过rvm似乎只是用来安装ruby，所以不清楚如果已经安装配置了ruby1.9.3版，是不是就不用它了呢？</p>

<p>RVM的安装方法参考Octopress的<a href="http://octopress.org/docs/setup/rvm/">说明</a>是这样的：</p>

<p>在命令行下执行：	</p>

<!-- more -->

<ul>
  <li>list element with functor item</li>
</ul>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby  &lt;!-- more --&gt;
</code></pre>

<ul>
  <li>list element with functor item</li>
</ul>

<!-- more -->

<ul>
  <li>list element with functor item</li>
</ul>

<p>安装过程中会自动安装ruby2.1.2：</p>

<pre><code>ruby-2.1.2 - #validate archive
ruby-2.1.2 - #extract
……
$ ruby --version
ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]
</code></pre>

<p>所以应该需要：</p>

<pre><code>rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest 
</code></pre>

<p>最后会告诉你：</p>

<pre><code>  * To start using RVM you need to run `source /home/pangyi/.rvm/scripts/rvm`
    in all your open shell windows, in rare cases you need to reopen all shell windows.
</code></pre>

<p>还要装一下rake，需要使用gem：</p>

<pre><code>sudo gem install rake
</code></pre>

<h1 id="octopress">Octopress的安装</h1>

<p>首先：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress 
</code></pre>

<p>然后安装主题：</p>

<pre><code>sudo gem install bundler
bundle install
rake install
</code></pre>

<p>在UBUNTU中需要加sudo。如果rake没装，请看上面。</p>

<h2 id="ubuntu">后记——使用UBUNTU自带版本安装</h2>

<p>UBUNTU自带版本为：</p>

<pre><code>$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-linux]
</code></pre>

<p>为了迁就octoeditor等VIM插件（从gvim启动时，无法用rvm use指定ruby版本），就需要以这个版本来安装了。安装时报了一些错误：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install
</span><span class="line">Fetching gem metadata from https://rubygems.org/.......
</span><span class="line">Using rake 10.3.2
</span><span class="line">
</span><span class="line">Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
</span><span class="line">
</span><span class="line">        /usr/bin/ruby1.9.1 extconf.rb 
</span><span class="line">/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
</span><span class="line">	from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class="line">	from extconf.rb:1:in `&lt;main&gt;'
</span><span class="line">
</span><span class="line">
</span><span class="line">Gem files will remain installed in /tmp/bundler20141115-3546-1wbtw8p/RedCloth-4.2.9/gems/RedCloth-4.2.9 for inspection.
</span><span class="line">Results logged to /tmp/bundler20141115-3546-1wbtw8p/RedCloth-4.2.9/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out
</span><span class="line">An error occurred while installing RedCloth (4.2.9), and Bundler cannot
</span><span class="line">continue.
</span><span class="line">Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查了一下，问题是一些相关的包，如dev包没有安装，最简单也比较土的办法是安装完全版本：</p>

<pre><code>sudo apt-get install ruby1.9.1-full
</code></pre>

<p>之后bundle install就没有报错了。</p>

<p>由于是重新安装，只要做bundle install就行了，不需要重新安装主题。此时rake的相关操作都可以正常执行，在vim中使用octoeditor插件时就不会出问题了。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang/">http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UBUNTU下使用PostgreSql.和nginx安装postfixAdmin2.92版]]></title>
    <link href="http://pangyi.github.io/blog/20150125/ubuntuxia-shi-yong-postgresql-dot-he-nginxan-zhuang-postfixadmin2-dot-92ban/"/>
    <updated>2015-01-25T14:55:37+08:00</updated>
    <id>http://pangyi.github.io/blog/20150125/ubuntuxia-shi-yong-postgresql-dot-he-nginxan-zhuang-postfixadmin2-dot-92ban</id>
    <content type="html"><![CDATA[<p>本文为在Ubuntu14.04中使用PostgreSql和Nginx安装PostfixAdmin2.92版的记录。</p>

<!-- more -->

<h2 id="section">需要安装的包</h2>

<p>记忆有些模糊，大概列一下：</p>

<p>postfix，PostgreSql，postfix-pgsql，php5-pgsql，nginx，php5-fpm，这些包可以通过Ubuntu的包管理安装。</p>

<h2 id="section-1">准备工作</h2>

<p>需要配置nginx支持php，方法见另外的文。</p>

<p>需要建立PostfixAdmi使用的PostgreSql数据库和数据库用户，并配置可以通过网络登录。</p>

<p>建数据库用户可以在psql中执行：</p>

<pre><code>create user postfix;
</code></pre>

<p>创建数据库可以用命令：</p>

<pre><code>createdb postfixdb -O postfix
</code></pre>

<h2 id="section-2">安装包下载</h2>

<p><a href="http://postfixadmin.sourceforge.net/">官方网站</a>上可以找到<a href="https://sourceforge.net/projects/postfixadmin/files/">下载链接</a>
由于是使用的ubuntu中的nginx，下载后把压缩包解压到/usr/share/nginx/html中，重命名为postfixadmin。并修改属主为www-data：</p>

<pre><code>sudo chown -R www-data postfixadmin
</code></pre>

<h2 id="section-3">初始化配置</h2>

<h3 id="section-4">初始化配置文件修改</h3>

<p>运行setup.php之前，需要修改config.ini.php。对这个文件修改项的diff结果（修改后的在前为：</p>

<pre><code>&lt; $CONF['configured'] = false;
---
&gt; $CONF['configured'] = true;
30c30
&lt; $CONF['setup_password'] = 'changeme';
---
&gt; $CONF['setup_password'] = '290c3045f1e273b6725835242ea7cf3d:87937c8fd844a8d4eac9b5cea48393224379663a';
34c34
&lt; $CONF['default_language'] = 'en';
---
&gt; $CONF['default_language'] = 'cn';
83c83
&lt; $CONF['database_type'] = 'mysqli';
---
&gt; $CONF['database_type'] = 'pgsql';
86,87c86,87
&lt; $CONF['database_password'] = 'postfixadmin';
&lt; $CONF['database_name'] = 'postfix';
---
&gt; $CONF['database_password'] = 'yourpassword';
&gt; $CONF['database_name'] = 'postfixdb';
</code></pre>

<p>setup_password一项与之后的设置有关，见下文，database_type一项如何设置配置文件中有说明，而configured需要改为true，才能进行初始化。</p>

<h3 id="section-5">初始化配置</h3>

<p>在浏览器中打开http://127.0.0.1/postfixadmin/setup.php/ 开始进行初始化配置。由于开始配置时没有截图，这里借用网上的其它图来说明一下，主要问题在设置管理员用户上，之前的环境检查问题不大。在设置管理员用户时，输入在config.ini.php中配置的setup_password报错，类似：</p>

<pre><code>if you want to use the password you entered as setup password, edit config.inc.php and set
 
$CONF['setup_password'] = '1a05f571012e9f14c0f80f764d516f80:ec41add25de301101bac12649f929bbcbea8575e';
</code></pre>

<p>把显示内容更新到config.ini.php，之后再进行配置就可以完成管理员用户的配置了：</p>

<p><img src="http://pangyi.github.io/images/postfixadmin-createadmin.png" /></p>

<h2 id="section-6">使用</h2>

<p>打开http://127.0.0.1/postfixadmin/ ，进入登录页面，用之前建立的管理员用户登录就会进入管理界面：</p>

<p><img src="http://pangyi.github.io/images/postfixadmin.png" /></p>

<h2 id="section-7">参考</h2>

<p>有关建立管理员时口令报错的问题：</p>

<p>http://www.tuicool.com/articles/yMfq22</p>

<p>一个比较老版本的配置，供参考一些思路吧：</p>

<p>http://blog.sina.com.cn/s/blog_57cf8eea0100aogd.html</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150125/ubuntuxia-shi-yong-postgresql-dot-he-nginxan-zhuang-postfixadmin2-dot-92ban/">http://pangyi.github.io/blog/20150125/ubuntuxia-shi-yong-postgresql-dot-he-nginxan-zhuang-postfixadmin2-dot-92ban/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置nginx支持PHP]]></title>
    <link href="http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/"/>
    <updated>2015-01-18T16:06:07+08:00</updated>
    <id>http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php</id>
    <content type="html"><![CDATA[<p>nginx本身不支持php。如果需要使用php，需要安装php解析服务，如php-fpm，或spawn-fcgi等。从在Ubuntu上配置的便捷性考虑，这次使用php-fpm实现。</p>

<!-- more -->

<h2 id="phpphp-fpm">安装php和php-fpm</h2>

<p>安装方法，略……</p>

<p>因为可以直接用包管理器安装。</p>

<p>安装后需要启动服务。</p>

<h2 id="nginx">修改nginx配置文件</h2>

<p>修改配置文件/etc/nginx/sites-available/default，首先让让默认页面里有php文件：</p>

<pre><code>index index.php index.html index.htm;
</code></pre>

<p>接着开启php支持，找到“location ~ .php”部分，将其中的注释进行修改：</p>

<pre><code>location ~ \.php$ {
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

	# With php5-cgi alone:
#	fastcgi_pass 127.0.0.1:9000;
	# With php5-fpm:
	fastcgi_pass unix:/var/run/php5-fpm.sock;
	fastcgi_index index.php;
	include fastcgi_params;
}
</code></pre>

<p>“fastcgi_pass 127.0.0.1:9000;”与spawn-fcgi有关，故要注释。修改配置文件后需要重启nginx服务。</p>

<h2 id="section">原理</h2>

<p>按网上的说法：“nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被nginx”。也就是说，nginx将处理请求交给php5-fpm，再接收处理返回结果。</p>

<h2 id="section-1">参考</h2>

<p>http://www.nginx.cn/231.html</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/">http://pangyi.github.io/blog/20150118/pei-zhi-nginxzhi-chi-php/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM窗口操作]]></title>
    <link href="http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/"/>
    <updated>2015-01-18T13:06:07+08:00</updated>
    <id>http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo</id>
    <content type="html"><![CDATA[<h2 id="section">开窗</h2>

<h3 id="section-1">横向切割（水平排列）窗口</h3>

<p>:new+窗口名(保存后就是文件名)	窗口名可选</p>

<p>:split+窗口名，也可以简写为:sp+窗口名	当前文件分别显示到了两个窗口，内容完全相同，并保持同步。</p>

<h3 id="section-2">纵向切割（垂直排列）窗口</h3>

<p>:vsplit+窗口名，也可以简写为：vsp+窗口名</p>

<h2 id="section-3">切窗</h2>

<p>Ctrl-w w	向后切换窗口，窗口操作都使用Ctrl-w开头。</p>

<p>Ctrl-w p	切换回上一个窗口，注意不是与w对应的操作。</p>

<p>Ctrl-w h	切换到左边窗口，如果有的话，下同</p>

<p>Ctrl-w l	切换到右边窗口</p>

<p>Ctrl-w j	切换到下面窗口</p>

<p>ctrl-w k	切换到上面窗口，这4个操作与光标操作的键位对应。</p>

<h2 id="section-4">其它</h2>

<p>Ctrl-w +	扩大窗口，如果还可以的话，因为是平均扩大，不会同时缩小其它窗口</p>

<p>Ctrl-w -	缩小窗口，窗口大小减一行。</p>

<p>Ctrl-w行数+	扩大窗口指定的行数。注意与Ctrl-w +不同，此命令只扩大当前窗口。</p>

<p>Ctrl-w行数-	缩小窗口指定的行数。</p>

<h2 id="section-5">参考文章</h2>

<p>http://blog.csdn.net/jeffry_cheng/article/details/6167378</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/">http://pangyi.github.io/blog/20150118/vimchuang-kou-cao-zuo/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步octopress文章到支持MetaWeblog的博客]]></title>
    <link href="http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/"/>
    <updated>2015-01-03T14:41:25+08:00</updated>
    <id>http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke</id>
    <content type="html"><![CDATA[<p>同步octopress文章到支持MetaWeblog的博客需要用到<a href="https://github.com/huangbowen521/octopress-syncPost">一个插件</a>。可能由于版本的问题，安装和配置需要做一些调整，否则如果按插件的说明来安装配置虽然能实现功能，但总有些不太合适的地方。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">获得插件</a></li>
  <li><a href="#section-1">修改插件</a></li>
  <li><a href="#section-2">配置配置文件</a></li>
  <li><a href="#section-3">安装相关的组件</a></li>
  <li><a href="#section-4">同步博文</a></li>
  <li><a href="#section-5">其它参考：</a></li>
</ul>

<h2 id="section">获得插件</h2>

<p>从github上获得插件中plugins中的5个ruby文件，分别实现同步全部博客，同步最后一篇博客，同步指定时间之后的博客，同步指定标题的博客等（有一个公共调用文件）。对这些文件要单独建一个目录存放，比如在octopress的根目录下建一个syncmeta目录。然后将插件放入此目录。</p>

<p>这样做是因为目前版本的octopress中的rake generate操作（实际执行的是jekyll build）时，会把plugins中的所有ruby文件执行一遍，这样做一次rake generate操作，就会做一次同步全部博客，同步最后一篇博客……</p>

<h2 id="section-1">修改插件</h2>

<p>在所有插件中找到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;./plugins/sync_post.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;./syncmeta/sync_post.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">配置配置文件</h2>

<p>Rakefile的配置完全按github上的说明，_config.yml中的MetaWeblog_url一项，需要使用最新的博客离线编辑的插件URL，如cnblog上我的博客的url就是http://rpc.cnblogs.com/metaweblog/maoxiong ，而不是插件说明中的那样。</p>

<h2 id="section-3">安装相关的组件</h2>

<p>在Gemfile中加入：</p>

<pre><code>gem 'metaweblog', '~&gt; 0.1.0'
gem 'nokogiri', '~&gt; 1.5.9'
</code></pre>

<p>然后执行bundle install进行安装。</p>

<p>安装中会报一些与库文件相关的错误，可以安装相关库文件：</p>

<pre><code>sudo apt-get install libxml2-dev libxslt-dev
</code></pre>

<h2 id="section-4">同步博文</h2>

<ul>
  <li>同步最后一篇博文：rake sync_latest_post[“PASSWD”]</li>
</ul>

<p>命令中只能输入一个密码，如果有多个博客要同步，要把它们的密码设置成一样的，下同。</p>

<p>在命令中输入密码时，密码最好不要有通常用于转义用的特殊字符，否则可能有问题。</p>

<p>如果不输入密码，则会在执行过程中要求输入每个博客的密码。此时密码中的特殊字符不影响使用。</p>

<ul>
  <li>
    <p>同步全部博文：sync_all_posts[“PASSWD”]</p>
  </li>
  <li>
    <p>同步某一时间之后的博文：rake sync_posts_after_date[“date”,”PASSWD”]</p>
  </li>
</ul>

<p>date类似于”2013-01-01” 、 “2013/01/01” 、 “Jan 1 2013”。如果更改了Octopress生成Blog的目录结构，会报类似“sync_post.rb: 权限不够”之类的错误。实际原因是插件中查找目录的部分使用的代码是按默认的目录结构设计的。这部分代码在sync_post.rb的第51行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">postDate</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">path</span><span class="o">[</span><span class="sr">/\d{4}\/\d{2}\/\d{2}/</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要对它进行修改以适应定制后的目录结构。</p>

<p>不清楚是不是与改过目录结构有关，按时间同步的速度非常慢。</p>

<ul>
  <li>同步指定标题的博文：rake sync_post_by_title[“title”,”PASSWD”]</li>
</ul>

<p>此处的title是博客标题，不是文件名。中文的标题在Octopress中会被替换成拼音。空格也会被替换成“-”。所以博客标题和文件名并不对应。</p>

<h2 id="section-5">其它参考：</h2>

<p>解决安装gem中的报错，并从中获得了修改日期目录结构的灵感：</p>

<p>http://fzyz999.github.io/blog/2013/05/06/ru-he-shi-yong-octopresscha-jian-tong-bu-bo-wen-dao-oschinashang/</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/">http://pangyi.github.io/blog/20150103/tong-bu-octopresswen-zhang-dao-zhi-chi-metaweblogde-bo-ke/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPG加密解密与实际应用]]></title>
    <link href="http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/"/>
    <updated>2015-01-03T11:27:13+08:00</updated>
    <id>http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong</id>
    <content type="html"><![CDATA[<p>主要内容：GPG加密解密的基本操作与少量应用。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">简介</a></li>
  <li><a href="#section-1">安装</a></li>
  <li><a href="#section-2">生成密钥操作过程</a></li>
  <li><a href="#section-3">对密钥的一些操作</a>    <ul>
      <li><a href="#section-4">查看密钥</a></li>
      <li><a href="#section-5">导出密钥</a></li>
      <li><a href="#section-6">导入密钥</a></li>
      <li><a href="#section-7">注销密钥</a></li>
      <li><a href="#section-8">删除密钥</a></li>
      <li><a href="#section-9">编辑密钥</a>        <ul>
          <li><a href="#section-10">签名</a></li>
          <li><a href="#section-11">修改密码</a></li>
          <li><a href="#section-12">等……</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-13">加密文件</a></li>
  <li><a href="#section-14">解密文件</a></li>
  <li><a href="#section-15">一些参考</a></li>
</ul>

<h2 id="section">简介</h2>

<p>GPG——GnuPG，是一种非对称密钥加密工具软件，主要用于加密解密，进行数字签名等。GPG可以生成用于加密解密、进行数字签名、数据指纹的非对称密钥。</p>

<h2 id="section-1">安装</h2>

<p>目前UBUNTU默认已经安装了GPG，编译安装可参考<a href="https://www.gnupg.org/howtos/zh/GPGMiniHowto-2.html#ss2.1">中文版Howto中的安装一节</a>。注意国际版和美国版的区别。</p>

<h2 id="section-2">生成密钥操作过程</h2>

<p>生成密钥的命令是gpg –gen-key，下面是一个gpg –gen-key执行的过程，会夹杂说明文字，并跳过一部分不重要的提示信息，来说明密钥生成的过程：</p>

<pre><code>gpg --gen-key
……
请选择您要使用的密钥种类：
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (仅用于签名)
   (4) RSA (仅用于签名)
您的选择？ 
</code></pre>

<p>可以选择不同的加密算法，以及用途。以前默认使用的是DSA算法，目前变成了RSA。这次选择默认。</p>

<pre><code>RSA 密钥长度应在 1024 位与 4096 位之间。
您想要用多大的密钥尺寸？(2048) 
</code></pre>

<p>密钥长度/尺寸越长，越不易破解，但也需要更多的处理过程，因而可能处理的更慢。此处默认值是2048。此值已经与HOWTO中不太一样了，更长了，DSA密钥的长度范围也变成了1024-3072之间。这是个“泄露年龄的问题”。</p>

<pre><code>请设定这把密钥的有效期限。
	 0 = 密钥永不过期
      &lt;n&gt;  = 密钥在 n 天后过期
      &lt;n&gt;w = 密钥在 n 周后过期
      &lt;n&gt;m = 密钥在 n 月后过期
      &lt;n&gt;y = 密钥在 n 年后过期
……
</code></pre>

<p>密钥有效期，不用解释。</p>

<pre><code>您需要一个用户标识来辨识您的密钥；本软件会用真实姓名、注释和电子邮件地址组合
成用户标识，如下所示：
    “Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;”

真实姓名： xxx
电子邮件地址： xxx@sina.com
</code></pre>

<p>这个标识会作为以后维护密钥的标志，如查询，导入导出，销毁等操作，将以此为UID进行检索确认对只个密钥进行操作。</p>

<pre><code>您需要一个密码来保护您的私钥。
</code></pre>

<p>输入一个密码，这样在使用密钥时，会要求输入密码，正确后才能使用密钥，这是第二重保护。
可以不输入密码，以用于一些特殊用途，不过一般情况下，还是有它比较好，只是必须记好，别忘了。</p>

<pre><code>我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。

随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！
(还需要177字节)
....+++++

随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！
(还需要155字节)
....................+++++
</code></pre>

<p>这时系统开始生成密钥，这期间需要有足够的操作以在内存中生成随机数。所以，去干点别的，直到密钥生成完毕，但不要离开喝茶。</p>

<pre><code>gpg: 密钥 375B9788 被标记为绝对信任
公钥和私钥已经生成并经签名。
……
sub   4096R/107FE36C 2014-12-13
</code></pre>

<p>至此密钥生成完成。</p>

<h2 id="section-3">对密钥的一些操作</h2>

<h3 id="section-4">查看密钥</h3>

<pre><code>$ gpg --list-keys
/home/pangyi/.gnupg/pubring.gpg
-------------------------------
pub   4096R/375B9788 2014-12-13
uid                  xxx (xxxxx) &lt;xxx@sina.com&gt;
sub   4096R/107FE36C 2014-12-13

pub   3072D/9D4F5F01 2014-12-14
uid                  uidfile (xxx) &lt;xxx@sina.com&gt;
sub   3072g/6D72E230 2014-12-14
</code></pre>

<p>可以看到密钥的UID。</p>

<p>查看密钥签名信息使用gpg –list-sigs，查看密钥指纹信息使用gpg –fingerprint</p>

<p>查看私钥信息：</p>

<pre><code>gpg --list-secret-keys
/home/pangyi/.gnupg/secring.gpg
-------------------------------
sec   4096R/375B9788 2014-12-13
uid                  xxx (xxxxx) &lt;xxx@sina.com&gt;
ssb   4096R/107FE36C 2014-12-13

sec   3072D/9D4F5F01 2014-12-14
uid                  uidfile (xxx) &lt;xxx@sina.com&gt;
ssb   3072g/6D72E230 2014-12-14
</code></pre>

<h3 id="section-5">导出密钥</h3>

<p>gpg –export 用于导出密钥公钥。当有多个密钥时，需要指定UID或sec处的标识，输入的UID不必完整，能唯一标识就能输出密钥。但用UID有可能会同时输出多个密钥来，不如使用sec好。</p>

<p>密钥会输出到标准输出，可以重定向到文件保存。</p>

<h3 id="section-6">导入密钥</h3>

<p>未测试，使用gpg –import [Filename]导入公钥，如果不指定文件则从标准输入导入。</p>

<h3 id="section-7">注销密钥</h3>

<p>未测试，使用gpg –gen-revoke注销，需要用到密钥密码</p>

<h3 id="section-8">删除密钥</h3>

<p>未测试，gpg –delete-key</p>

<h3 id="section-9">编辑密钥</h3>

<p>gpg –edit-key是编辑密钥的指令，它能：</p>

<h4 id="section-10">签名</h4>

<p>没有导入的密钥，无法测试，本地生成的已经签过：gpg –edit-key UID sign</p>

<h4 id="section-11">修改密码</h4>

<p>未测试，gpg –edit-key UID passwd</p>

<h4 id="section-12">等……</h4>

<h2 id="section-13">加密文件</h2>

<p>加密一个文件，使用“gpg -e -r UID 文件名”来完成。加密后会生成一个原文件名.gpg的文件。</p>

<h2 id="section-14">解密文件</h2>

<p>解密文件的操作如下：</p>

<pre><code>$ gpg -d -r uidfile test.gpg
gpg: 由 3072 位的 ELG-E 密钥加密，钥匙号为 6D72E230、生成于 2014-12-14
      “uidfile (xxx) &lt;xxx@sina.com&gt;”
test
</code></pre>

<p>除前两行显示外的内容是GPG显示到标准输出的内容。它是解密后文件的内容。可以将它重定向生成文件获取解密的文件。可以看到，加密前文件的内容是test。</p>

<p>不知道是不是因为输出内容中有到非标准输出的内容，虽然进程的返回结果是0，但在expect这类脚本语言中会出现报错，无法正常执行。</p>

<p>如果密钥生成时设置了密码，在解密时会提示输入，如果输入不正解是无法解密的。</p>

<p>在UBUNTU环境中，如果输入过一次密码，那么之后都不用再输入，直到系统重新启动。</p>

<h2 id="section-15">一些参考</h2>

<p>由于应用更新等原因，网络上的信息需要“领会精神”，要看最准确的参考文档，还是要看最新的官方文档或man帮助。以下是一些中文的参考文章：</p>

<p>http://www.linuxfly.org/post/274/</p>

<p>https://www.gnupg.org/howtos/zh/GPGMiniHowto-1.html
&lt;p class=&#8217;post-footer&#8217;&gt;
原文链接地址：
<a href="http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/">http://pangyi.github.io/blog/20150103/gpgjia-mi-jie-mi-yu-shi-ji-ying-yong/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
 posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置octopress首页的日期格式]]></title>
    <link href="http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/"/>
    <updated>2015-01-02T19:49:30+08:00</updated>
    <id>http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi</id>
    <content type="html"><![CDATA[<p>通过_config.yml中的date_format参数设置对我目前使用的2.0版本的octopress的首页中的文章日期的显示不起作用，需要用其它方式进行设置。</p>

<!--more-->

<p>设置方式为，修改source/_includes/post/date.html文件，将其中的{{ page.date_time_html }}替换为（请自觉去掉“\”，因为octopress处理大括号的问题，不加就不能显示，加了又不对，下同）:</p>

<pre><code>\{\{ page.date | date: '%Y年%m月%d日' }}
</code></pre>

<p>单引号中的内容是Jekyll（也是octopress）的日期格式，在<a href="http://alanwsmith.com/jekyll-liquid-date-formatting-examples">此处</a>可以找到相关的例子。比如：</p>

<pre><code>\{\{ page.date | date: '%B %d, %Y' }}
</code></pre>

<p>会让日期显示为：</p>

<pre><code>January 02, 2015
</code></pre>

<p>可参考这个<a href="http://alanwsmith.com/jekyll-liquid-date-formatting-examples">Jekyll Date Formatting Examples</a>以及一个<a href="http://stackoverflow.com/questions/26458533/octopresss-date-format-not-working">我等了几个月的问题的回复</a>，这个回复中的第二个回复是正解。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/">http://pangyi.github.io/blog/20150102/she-zhi-octopressshou-ye-de-ri-qi-ge-shi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络测试工具netperf]]></title>
    <link href="http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/"/>
    <updated>2014-12-10T22:00:06+08:00</updated>
    <id>http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf</id>
    <content type="html"><![CDATA[<p>一般我们进行网络测试，主要是测试网络的连通性、网络带宽、网络响应时间等。常用的工具包括ping、traceroute、telnet、ftp等。如测试网络连通性，可以使用ping，traceroute，如果测试防火墙是否配置正确，可以使用telnet和traceroute -p，使用ping命令可以测试网络延迟，ftp则用来测试网络带宽。</p>

<p>但如果需要做一些更为深入的测试，如测试不同包大小的不同类型的业务的网络处理能力，则需要更专业的工具，如netperf，iperf等。</p>

<!--more-->

<h2 id="netperf">netperf测试工具介绍</h2>

<p><a href="http://www.netperf.org/">netperf</a>是一个开源的网络性能测试工具。可以在AIX和LINUX平台上安装，支持跨平台使用。</p>

<p>netperf可以进行的测试TCP网络性能、UDP网络性能，并且可以模拟Client/Server长连接或短连接场景，因此能更接近实际网络的使用环境进行测试和评估。</p>

<h2 id="section">安装</h2>

<p>从<a href="http://www.netperf.org/">官方网站</a>可以下载源代码进行编译安装。安装过程基本上是老三步，即</p>

<pre><code>./configcure
make
make install
</code></pre>

<p>默认安装路径是/usr/local下的各目录。在AIX等系统中，可能需要自己设置PATH环境变量，或使用–prefix参数更改安装路径。</p>

<p>对于<em>SUSE</em>，在安装中发现，在内核版本为2.6.16(SUSE 10)时，会出现编译错误：</p>

<pre><code>nettest_omni.o: In function `recv_data_no_copy':
nettest_omni.c:(.text+0x6e44): undefined reference to `splice'
nettest_omni.c:(.text+0x6e7b): undefined reference to `splice'
collect2: ld returned 1 exit status
make[3]: *** [netperf] Error 1
make[3]: Leaving directory `/root/py/netperf-2.6.0/src'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/root/py/netperf-2.6.0/src'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/root/py/netperf-2.6.0'
</code></pre>

<p>经查，splice系统调用是在2.6.17内核版本以后出现的，因此换用SUSE 11编译通过。</p>

<p>如果是UBUNTU之类的版本，因为软件库中已经有了netperf，可以用包管理器安装。比如UBUNTU中使用：</p>

<pre><code>sudo apt-get install netperf
</code></pre>

<h2 id="section-1">使用</h2>

<h3 id="section-2">启动服务</h3>

<p>netperf包括两个程序。一个是客户端netperf，用于模拟各类网络行为。另一个为服务器程序netserver。用于接收客户端的请求。启动服务的操作类似于：</p>

<pre><code># netserver
Starting netserver with host 'IN(6)ADDR_ANY' port '12865' and family AF_UNSPEC
</code></pre>

<p>默认情况下TCP服务的监听启动在12865端口上。可以通过-p参数修改。</p>

<p>未发现使用了哪个UDP端口，估计是在测试时根据netperf启用的测试项目再启用端口的。</p>

<h3 id="netperf-1">netperf参数说明</h3>

<p>netperf的参数格式如下：</p>

<pre><code>netperf [global options] -- [test options] 
</code></pre>

<p>其中，global options为通用参数，所有测试项目都涉及或是公共的参数，常用的有：</p>

<p>-H 主机名或IP		指定运行netserver的服务器的IP</p>

<p>-l 测试时长		指定测试的时间长度，单位为秒</p>

<p>-t 测试项目		指定测试的内容。测试项目如下：</p>

<p>TCP批量数据传输测试                     TCP_STREAM</p>

<pre><code>                 TCP_SENDFILE

                 TCP_MAERTS
</code></pre>

<p>TCP请求应答（长连接）模式测试                     TCP_RR</p>

<pre><code>                 TCP_CRR
</code></pre>

<p>UCP批量数据传输测试                    UDP_STREAM</p>

<pre><code>                 UDP_RR

                 DLCO_STREAM

                 DLCO_RR

                 DLCL_STREAM

                 DLCL_RR

                 STREAM_STREAM

                 STREAM_RR

                 DG_STREAM

                 DG_RR

                 SCTP_STREAM

                 SCTP_STREAM_MANY

                 SCTP_RR

                 SCTP_RR_MANY

                 LOC_CPU

                 REM_CPU
</code></pre>

<p>test specific options是测试项用的参数，它与全局参数之间要用“–”分开类似</p>

<pre><code>netperf -H 127.0.0.1 -l 30 -- -m 2048
</code></pre>

<p>测试项参数与测试项目相关。</p>

<h2 id="section-3">常用测试项目</h2>

<h3 id="section-4">网络带宽测试</h3>

<p>带宽测试一般使用-t TCP_STREAM测试项，这也是netperf的默认测试项目。此项测试与ftp类似可以测试系统的带宽，但可以通过参数进行更多的设置。比如：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  16384    60.00    2760.70 
</code></pre>

<p>第一列为服务端接收包的Socket缓冲区大小，这里没87380</p>

<p>第二列为客户端发送数据的Socket缓冲区大小，这里为16384</p>

<p>第三列为发送的消息的大小，这里为16384</p>

<p>第四列为测试时长</p>

<p>第五列为测试的速率，单位为M，这里结果为2.7G。因为使用的是localhost，实际是在本机的内存中收发的数据。</p>

<p>TCP_STREAM的常用测试参数有：</p>

<p>-s 缓冲区大小	指定客户端发送数据的缓冲区大小
-S 缓冲区大小	指定服务端接收数据的缓冲区大小</p>

<p>-m 发送消息大小	单位为bytes</p>

<p>-M 接收消息大小	单位为bytes</p>

<p>可以调整这些参数，了解哪些因素对传输速率有影响。比如将发送缓冲变大，测试结果变化不大：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ netperf -H 127.0.0.1 -l 60 -- -s 65535
</span><span class="line">MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
</span><span class="line">Recv   Send    Send                          
</span><span class="line">Socket Socket  Message  Elapsed              
</span><span class="line">Size   Size    Size     Time     Throughput  
</span><span class="line">bytes  bytes   bytes    secs.    10^6bits/sec  
</span><span class="line">
</span><span class="line"> 87380 131070 131070    60.00    2672.42   </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而改变接收缓冲和发包大小，则可以提升性能：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -- -S 65535 
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

131070  16384  16384    60.00    3058.22   
$ netperf -H 127.0.0.1 -l 60 -- -m 65535
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  65535    60.00    3266.55   
</code></pre>

<h3 id="udp">UDP协议的传输性能</h3>

<p>与网络带宽测试类似，只是更换了协议，所以这个项目是UDP_STREAM：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t UDP_STREAM
MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Socket  Message  Elapsed      Messages                
Size    Size     Time         Okay Errors   Throughput
bytes   bytes    secs            #      #   10^6bits/sec

212992   65507   60.00      440506      0    3847.46
212992           60.00      433151           3783.22
</code></pre>

<p>与TCP_STREAM不太一样，测试结果中有两行数据。第一行是客户端的，第二行是服务端。</p>

<p>第一列为缓冲区大小，在netperf测试中，两端的缓冲区大小会设置成一样大。</p>

<p>第二列为消息大小</p>

<p>第三列为测试传输时间</p>

<p>第四列为传输数据包量，UDP由于协议不保证传输可靠性，收发消息数量不一样多，而且实际生产环境收包量可能比发包少得更多。从数据看，这个包数量应是每秒数量（消息大小和速度的单位不一样）</p>

<p>最后是测试的速率，可以看到要比TCP协议快一些。这是协议决定的。</p>

<h3 id="tcp">TCP长连接请求应答模式测试</h3>

<p>除了网络数据传输，大量的网络流量是请求/应答式的，即一方发送一个报文，另一方回复一个。而且通常这类请求和回复的报文大小不一样大，甚至差别很大。netperf可以简单模拟这类应用场景，进行网络性能测试。测试使用类型为TCP_RR。</p>

<p>最简单的TCP_RR测试如下：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_RR
MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  1        1       60.00    13517.65   
16384  87380 
</code></pre>

<p>测试结果分为两行，第一行是本地，第二行是远端（服务端）</p>

<p>第一列和第二列应该还是缓冲区，只是和STREAM测试的顺序相反。</p>

<p>第三、四列为请求和返回包的大小。默认为1位。</p>

<p>第五列为测试时间</p>

<p>第六列为交易速率，这次是笔数/每秒，不再是带宽。</p>

<p>默认的包大小实际业务中不可能发生，可以通过参数进行调整，来模拟真实的情况。使用测试参数-r 请求包大小,应答包大小（-r request,response）来测试。注意此参数单位为BYTES，实际的业务一般是以字节为单位的报文：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_RR -- -r 64,2048
MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  64       2048    60.00    13129.09   
16384  87380 
</code></pre>

<p>此测试使用8字节的请求，256字节的返应答包进行测试，测试结果相对默认值轻微下降。</p>

<h3 id="tcp-1">TCP短连接请求应答模式测试</h3>

<p>TCP请求的另一大类是类似HTTP业务的短连接请求应答报文。对应的测试项是TCP_CRR：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t TCP_CRR             
MIGRATED TCP Connect/Request/Response TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

16384  87380  1        1       60.00    2210.55   
16384  87380 
</code></pre>

<p>测试参数和显示与TCP_RR类似。由于业务类型的影响，速率降得比厉害。</p>

<h3 id="udp-1">UDP连接请求应答模式测试</h3>

<p>由于UDP协议的原因，UDP请求应答不分长短连接。只有UDP_RR一个测试项目，测试参数也类似TCP类的测试：</p>

<pre><code>$ netperf -H 127.0.0.1 -l 60 -t UDP_RR              
MIGRATED UDP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 127.0.0.1 () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

212992 212992 1        1       60.00    15837.63   
212992 212992
</code></pre>

<p>理论上，UDP的测试结果要好于TCP，但在实际网络中，可能受网络设备配置等影响，存在一定未知数。</p>

<h2 id="section-5">如何进行模拟测试</h2>

<p>首先需要搞好测试用例。要明确业务的类型，协议，好确定选择哪个测试项目，要了解业务的特性，如一般包的大小等信息，以便选择合适的参数。这些参数可以根据业务设计来确定，也可能需要通过业务监控数据来获取。例如通过监控数据中的最大流量和最大IO量，可以大致评估一下数据包的大小，当然这种评估很不精确。</p>

<p>由于决定网络性能的因素有一部分和配置相关，因此在测试中可以变更缓冲区大小等参数，以便了解是否需要对网络参数进行调整。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/">http://pangyi.github.io/blog/20141210/wang-luo-ce-shi-gong-ju-netperf/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用calibre抓取RSS新闻制作电子书及推送到kindle]]></title>
    <link href="http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/"/>
    <updated>2014-12-08T20:52:45+08:00</updated>
    <id>http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle</id>
    <content type="html"><![CDATA[<p>calibre可以从RSS源抓取内容，转换成它所支持格式的电子书，还可以推送到阅读器设备。下面来看看在calibre图形界面和命令行下如何实现这些功能。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">在图形界面抓取新闻</a></li>
  <li><a href="#section-1">自定义新闻来源</a></li>
  <li><a href="#section-2">看看我们自定义了什么</a></li>
  <li><a href="#section-3">命令行下生成电子杂志</a></li>
  <li><a href="#kindle">命令行推送到Kindle</a></li>
  <li><a href="#section-4">简单定时推送的实现</a></li>
  <li><a href="#section-5">一些要注意的问题</a></li>
  <li><a href="#section-6">其它方法</a></li>
  <li><a href="#section-7">参考</a></li>
</ul>

<p>calibre可以从RSS源抓取内容，转换成它所支持格式的电子书，还可以推送到阅读器设备。下面来看看在calibre图形界面和命令行下如何实现这些功能。</p>

<h2 id="section">在图形界面抓取新闻</h2>

<p>打开calibre，在工具栏中选那个“抓取新闻”，会看到按语言分类的已经定义好的各类新闻源：</p>

<p><img src="http://pangyi.github.io/images/getnews.png" /></p>

<p>点一下“立即下载”就可以把新闻抓取为电子书了。如果设置了发送到KINDLE的邮箱配置，那么抓取完成后会自动发送邮件进行推送。</p>

<p>如果你有个24小时开机的电脑，可以设置一下计划下载，进行定时推送。</p>

<p>“删除指定天数前下载的新闻”，和“高级选项”页中的“最多保留份数”可以设置电子书的保存时间。当鼠标移动到此处时，就会自动显示帮助，可以自己看。需要说明的是，从我这看到的效果来说，这些选项只对Calibre自己有效。<em>对于Kindle</em>，报刊杂志类的书籍会保存14份，如果没有特意保留，那么最老的会覆盖——不过到目前为止我还没搞到那么多期呢。</p>

<h2 id="section-1">自定义新闻来源</h2>

<p>点击“抓取新闻”旁边的下拉按钮，选“添加自定义新闻源”，可以自己配置抓取的新闻：</p>

<p><img src="http://pangyi.github.io/images/add_onwer_news.png" /></p>

<p>配置方法就是找到你要抓取的新闻的rss地址，加入右下方的“将新闻加入订阅清单”的源网址处，自己起个名字，再点“添加源”。一个杂志可以加入多个源。在把所有的源加好后，修改一下“订阅清单标题”，其后<em>一定</em>要“添加/更新订阅清单”，这样才能把修改保存下来。否则一切都白费了。</p>

<h2 id="section-2">看看我们自定义了什么</h2>

<p>点击一下“切换到高级模式”，就能知道抓取新闻的配置是写在一个Python文件中的了。例如这个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">AdvancedUserRecipe1417937312</span><span class="p">(</span><span class="n">BasicNewsRecipe</span><span class="p">):</span>
</span><span class="line">    <span class="n">title</span>          <span class="o">=</span> <span class="s">u&#39;</span><span class="se">\u79d1\u6280\u4e71\u5f39</span><span class="s">&#39;</span>
</span><span class="line">    <span class="n">oldest_article</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">    <span class="n">max_articles_per_feed</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class="line">    <span class="n">auto_cleanup</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line">    <span class="n">feeds</span>          <span class="o">=</span> <span class="p">[(</span><span class="s">u&#39;</span><span class="se">\u79d1\u5b66\u677e\u9f20\u4f1a</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://songshuhui.net/feed&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u77e5\u4e4e\u6bcf\u65e5\u7cbe\u9009</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://www.zhihu.com/rss&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u679c\u58f3\u7f51</span><span class="s"> guokr.com&#39;</span><span class="p">,</span> <span class="s">u&#39;http://www.guokr.com/rss/&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">u&#39;</span><span class="se">\u714e\u86cb</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;http://jandan.net/feed&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Calibre用Python语言把配置保存为一个.recipe的文件。后面用命令行生成杂志的操作会用到这些文件。点击“显示订阅清单文件”，会打开存入自定义源的配置文件的目录。可以从这里获得.recipe文件用来在命令行下进行操作。</p>

<h2 id="section-3">命令行下生成电子杂志</h2>

<p>Calibre附带的命令行工具ebook-convert可以完成生成电子书的操作。比如使用：</p>

<pre><code>ebook-convert 科技乱弹.recipe .mobi
</code></pre>

<p>这会生成一个同名的mobi文件，可以供kindle使用。与在Calibre中生成的电子书的差别是它的标题中包括了日期的一些信息。实际上这更便于推送到Kindle。</p>

<p>.recipe文件可以自己定义，然后复制过来，或者到网上找别人做的配置文件。在尝试搞自己的自动推送功能时，发现了一些.recipe文件的来源，不过不一定适用于所有的Calibre：</p>

<p>https://github.com/RichardUSTC/calibre-recipes</p>

<p>https://github.com/fengli/ikindle_recipe</p>

<h2 id="kindle">命令行推送到Kindle</h2>

<p>Calibre也有命令行的邮件发送工具，可以用来进行推送杂志到kindle的工作：</p>

<pre><code>calibre-smtp --attachment 推送的文件名.mobi --relay 邮箱的smtp服务器域名 --port smtp地址（一般是25） --username 邮箱账号 --password "邮箱密码" --encryption-method TLS 邮箱名 Kindle设备推送邮箱（类似XXX@kindle.cn） "邮件正文，内容随便" -v -s "convert"
</code></pre>

<p>-s指定邮件主题，推送到Kindle必须是convert。–attachment是指定附件，就是要推送的书了。</p>

<p>也可以使用其它的工具。当然最好是命令行下能进行发送的。因为这样才能做后面的定时发送。比如我用了mutt，因为我用UBUNTU。怎么使用参考相关文档就可以了。</p>

<h2 id="section-4">简单定时推送的实现</h2>

<p>工具都备齐了，实现定时发送就没什么问题了。只要使用定时调度工具，定时启动命令行脚本就行了。在各类操作系统上都有定时调度工具，如Windows的计划任务，Unix/Linux的Crontab工具等。我当然是用Crontab的，附一个简单的脚本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># recipe文件路径</span>
</span><span class="line"><span class="nv">re_path</span><span class="o">=</span><span class="nv">$1</span>
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> <span class="nv">$re_path</span>
</span><span class="line"><span class="k">for</span> name in <span class="sb">`</span>ls *.recipe<span class="p">|</span>awk -F <span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class="line"><span class="k">do</span>
</span><span class="line">	<span class="nb">echo</span> <span class="s2">&quot;生成杂志$name&quot;</span>
</span><span class="line">	ebook-convert <span class="k">${</span><span class="nv">name</span><span class="k">}</span>.recipe .mobi
</span><span class="line">	sleep 3
</span><span class="line">	<span class="nb">echo</span> <span class="s2">&quot;${name}&quot;</span><span class="p">|</span>mutt -s convert amaoxiong_k@kindle.cn -a <span class="k">${</span><span class="nv">name</span><span class="k">}</span>.mobi
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>抛砖引玉而而已。我把生成的.recipe文件复制到单独的目录并重新命名，这样可以用这个脚本通过设定不同的执行时间，将不同目录中的recipe在不同的时间推送到Kindle。</p>

<p>目前基本功能是有了，以后有时间再搞搞密码加密解密，失败重新发送之类的。</p>

<h2 id="section-5">一些要注意的问题</h2>

<p>使用Kindle的推送功能，当然<em>别忘了把邮箱加入到kindle的认可列表中</em>。可以用Calibre的工具进行测试和手工推送一下。</p>

<p>使用Calibre抓取推送时，发生过首次推送后之后就不成功的情况，后将Calibre中的书名改了一下，手工推送就成功能了。</p>

<p>如果经常推送不成功，可以看看<em>生成的杂志是不是太大</em>。这可能造成发送邮件失败。降低电子书大小最根本的是减少抓取的内容，包括少加几个源，减少最老文章天数和每个源的最多文章数等。</p>

<h2 id="section-6">其它方法</h2>

<p><a href="https://github.com/cdhigh/KindleEar">KindleEar</a>是个运行在Google App Engine(GAE)上的Kindle个人推送服务器，可以自动抓取和推送RSS。由于是运行在云上的，就不用使用自己的电脑，也不用到点或一直开机了。最近不怎么翻，目前没研究。</p>

<p>以前爱看豆也提供类似服务，不过最近不知道还能不能用。另外网上有些收费的类似服务可以使用，也不介绍了，各位自己去找就行。</p>

<h2 id="section-7">参考</h2>

<p>除了上面提到的东东，下面是成此文所参考的一些网文：</p>

<p>http://zodiac1111.github.io/blog/rss2kindle-use-calibre/</p>

<p>http://richardustc.github.io/blog/2013/06/calibre-recipe-howto/</p>

<p>对Calibre转换电子书格式的说明，比较详细，但和本文关系不太大：http://blog.csdn.net/ccwwff/article/details/5982552</p>

<p>手工制作电子书：http://www.360doc.com/content/11/0224/12/3968002_95668374.shtml</p>

<p>如何向Kindle推送：http://www.amazon.cn/gp/help/customer/display.html?ie=UTF8&amp;nodeId=200767340</p>

<p>IBM（看来是某粉的作品）的Calibre介绍，算是最全面的中文文档了：http://www.ibm.com/developerworks/cn/opensource/os-calibre/index.html</p>

<p>另外man和Calibre官方网站上的资料是最重要的参考。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/">http://pangyi.github.io/blog/20141208/yong-calibrezhua-qu-rssxin-wen-zhi-zuo-dian-zi-shu-ji-tui-song-dao-kindle/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[增加octopress的说明和目录的VIM函数和快捷键配置]]></title>
    <link href="http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/"/>
    <updated>2014-11-23T16:25:39+08:00</updated>
    <id>http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi</id>
    <content type="html"><![CDATA[<p>照猫画虎，写了一个函数，并加了一个快捷键，为octopress文章增加一些特定的内容，好在文章列表和首页处显示文章简介或摘要，并给文章建立目录。</p>

<p>之所以把这两部分合并在一起，是因为加了目录后，目录就成了文章最前面的内容，这时目录会作为文章开头内容显示在首页，不大好看，所以这两个东东一般是要配合使用的。</p>

<p>所需要增加的内容如下：</p>

<pre><code>&lt;!-- more --&gt;

* list element with functor item
{:toc}
</code></pre>

<p>实现这一功能的函数放在.vimrc中，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">map <span class="p">&lt;</span>F7<span class="p">&gt;</span> :<span class="k">call</span> OctopressIndex<span class="p">()&lt;</span><span class="k">cr</span><span class="p">&gt;</span>&#39;<span class="k">s</span>
</span><span class="line"><span class="k">function</span> OctopressIndex<span class="p">()</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">18</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">19</span><span class="p">,</span><span class="s2">&quot;&lt;!-- more --&gt;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">21</span><span class="p">,</span><span class="s2">&quot;* list element with functor item&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">22</span><span class="p">,</span><span class="s2">&quot;{:toc}&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">call</span> append<span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    echohl WarningMsg <span class="p">|</span> echo <span class="s2">&quot;Successful in adding the Octopress Index and read on.&quot;</span> <span class="p">|</span> echohl None
</span><span class="line"><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>功能就是从19行起，插入要增加的内容。快捷键是F7</p>

<p>这里要说明一下，因为我的文章是先在VimWiki中写的，前面会加一个文件头，因此要从19行加起。写完之后，我会利用vimdiff的功能，将内容合并到博客文章中发布。</p>

<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/">http://pangyi.github.io/blog/20141123/zeng-jia-octopressde-shuo-ming-he-mu-lu-de-vimhan-shu-he-kuai-jie-jian-pei-zhi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test中和 空格]]></title>
    <link href="http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/"/>
    <updated>2014-11-19T21:58:20+08:00</updated>
    <id>http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/">http://pangyi.github.io/blog/20141119/testzhong-he-kong-ge/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test测试]]></title>
    <link href="http://pangyi.github.io/blog/20141119/testce-shi/"/>
    <updated>2014-11-19T21:09:52+08:00</updated>
    <id>http://pangyi.github.io/blog/20141119/testce-shi</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141119/testce-shi/">http://pangyi.github.io/blog/20141119/testce-shi/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试插件]]></title>
    <link href="http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/"/>
    <updated>2014-11-18T22:53:08+08:00</updated>
    <id>http://pangyi.github.io/blog/20141118/ce-shi-cha-jian</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/">http://pangyi.github.io/blog/20141118/ce-shi-cha-jian/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试文件头]]></title>
    <link href="http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/"/>
    <updated>2014-11-05T23:03:36+08:00</updated>
    <id>http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou</id>
    <content type="html"><![CDATA[<p class="post-footer">
原文链接地址：
<a href="http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/">http://pangyi.github.io/blog/20141105/ce-shi-wen-jian-tou/</a><br />
written by <a href="http://pangyi.github.io">PangYi</a>
&nbsp;posted at <a href="http://pangyi.github.io">http://pangyi.github.io</a>
</p>
]]></content>
  </entry>
  
</feed>
